<?xml version="1.0" encoding="US-ASCII"?>
<!-- edited with XMLSPY v5 rel. 4 U (http://www.xmlspy.com) by Fred Baker (private) -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="no"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<rfc category="std" docName="draft-ietf-ipsecme-g-ikev2-02" ipr="trust200902" obsoletes="6407">
  <front>
    <title abbrev="G-IKEv2">Group Key Management using IKEv2</title>

    <author fullname="Valery Smyslov" initials="V.S." surname="Smyslov">
      <organization>ELVIS-PLUS</organization>

      <address>
        <postal>
          <street>PO Box 81</street>
          <city>Moscow (Zelenograd)</city>
          <code>124460</code>
          <region></region>
          <country>Russian Federation</country>
        </postal>
        <phone>+7 495 276 0211</phone>
        <email>svan@elvis.ru</email>
      </address>
    </author>

    <author fullname="Brian Weis" initials="B.W." surname="Weis">
      <organization>Independent</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <region></region>
          <country>USA</country>
        </postal>
        <phone></phone>
        <email>bew.stds@gmail.com</email>
      </address>
    </author>

    <date />

    <area>Security Area</area>

    <abstract>
      <t> This document presents an extension to the Internet Key Exchange version 2 (IKEv2) protocol 
      for the purpose of a group key management. The protocol is in conformance with the
      Multicast Security (MSEC) key management architecture, which contains
      two components: member registration and group rekeying. Both components
      require a Group Controller/Key Server to download IPsec group security
      associations to authorized members of a group. The group members then
      exchange IP multicast or other group traffic as IPsec packets. This
      document obsoletes RFC 6407.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction and Overview">
      <t> A group key management protocol provides IPsec keys and policy to a
      set of IPsec devices which are authorized to communicate using a Group
      Security Association (GSA) defined in <xref target="RFC3740"></xref>.
      The data communications within the group (e.g., IP multicast packets)
      are protected by a key pushed to the group members (GMs) by the Group
      Controller/Key Server (GCKS). This document presents an extension to IKEv2
      <xref target="RFC7296"></xref> called G-IKEv2, that allows to perform a group key
      management.</t>

      <t>G-IKEv2 conforms to the Multicast Group Security
      Architecture <xref target="RFC3740"></xref>, Multicast Extensions to the
      Security Architecture for the Internet Protocol <xref target="RFC5374"></xref>
      and the Multicast Security (MSEC) Group Key Management Architecture <xref target="RFC4046"></xref>.
      G-IKEv2 replaces GDOI <xref target="RFC6407"></xref>, which defines a
      similar group key management protocol using IKEv1 <xref
      target="RFC2409"></xref> (since deprecated by IKEv2). When G-IKEv2 is
      used, group key management use cases can benefit from the simplicity,
      increased robustness and cryptographic improvements of IKEv2 (see
      Appendix A of <xref target="RFC7296"></xref>.</t>

      <t>A GM begins a "registration" exchange when it first joins the group.
      With G-IKEv2, the GCKS authenticates and authorizes GMs, then pushes
      policy and keys used by the group to the GM. G-IKEv2 includes two
      "registration" exchanges. The first is the GSA_AUTH exchange (
      <xref target="gsa_auth" />), which follows an IKE_SA_INIT exchange. The
      second is the GSA_REGISTRATION exchange (<xref target="gsa_registration" />), 
      which a GM can use within an established IKE SA. Group rekeys are accomplished using either 
      the GSA_REKEY pseudo-exchange (a single message distributed to all GMs, usually as
      a multicast message), or as a GSA_INBAND_REKEY exchange delivered
      individually to group members using existing IKE SAs).</t>

      <t>Large and small groups may use different sets of these protocols.
      When a large group of devices are communicating, the GCKS is likely to
      use the GSA_REKEY message for efficiency. This is shown in <xref
      target="large-groups"></xref>. (Note: For clarity, IKE_SA_INIT is
      omitted from the figure.)</t>

      <figure anchor="large-groups" title="G-IKEv2 used in large groups">
        <artwork align="center" name=""><![CDATA[
                      +--------+
       +------------->|  GCKS  |<-------------+
       |              +--------+              |
       |                |    ^                |
       |                |    |                |
       |                | GSA_AUTH            |
       |                |   or                |
       |                | GSA_REGISTRATION    |
       |                |    |                |
    GSA_AUTH            |    |             GSA_AUTH
      or           GSA_REKEY |               or
GSA_REGISTRATION        |    |         GSA_REGISTRATION
       |                |    |                |
       |   +------------+-----------------+   |
       |   |            |    |            |   |
       v   v            v    v            v   v
     +-------+        +--------+        +-------+
     |  GM   |  ...   |   GM   |  ...   |  GM   |
     +-------+        +--------+        +-------+
         ^                 ^                ^
         |                 |                |
         +-------ESP-------+-------ESP------+
]]></artwork>
      </figure>

      <t>Alternatively, a small group may simply use the GSA_AUTH as a
      registration protocol, where the GCKS issues rekeys using the
      GSA_INBAND_REKEY within the same IKEv2 SA. The GCKS is also likely to be
      a GM in a small group (as shown in <xref
      target="small-groups"></xref>.)</t>

      <figure anchor="small-groups" title="G-IKEv2 used in small groups">
        <artwork align="center" name=""><![CDATA[ 
               GSA_AUTH, GSA_INBAND_REKEY
 +-----------------------------------------------+
 |                                               |
 |         GSA_AUTH, GSA_INBAND_REKEY            |
 |   +-----------------------------+             |
 |   |                             |             |
 |   | GSA_AUTH, GSA_INBAND_REKEY  |             |
 |   |   +--------+                |             |
 v   v   v        v                v             v
+---------+    +----+           +----+        +----+
| GCKS/GM |    | GM |           | GM |        | GM |
+---------+    +----+           +----+        +----+
     ^            ^                ^             ^
     |            |                |             | 
     +----ESP-----+------ESP-------+-----ESP-----+
]]></artwork>
      </figure>

      <t>IKEv2 message semantics are preserved in that all communications
      consists of message request-response pairs. The exception to this rule
      is the GSA_REKEY pseudo-exchange, which is a single message delivering group
      updates to the GMs.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in BCP
        14 <xref target="RFC2119"></xref> <xref target="RFC8174"></xref> when,
        and only when, they appear in all capitals, as shown here.</t>
      </section>

    <section title="G-IKEv2 Integration into IKEv2 Protocol">
      <t>G-IKEv2 uses the security mechanisms of IKEv2 (peer authentication,
      confidentiality, message integrity) to ensure that only authenticated
      devices have access to the group policy and keys. The G-IKEv2 exchange
      further provides group authorization, and secure policy and key download
      from the GCKS to GMs. Some IKEv2 extensions require special handling if used with G-IKEv2. 
      See <xref target="ike_ext" /> for more details.</t>

      <t>It is assumed that readers are familiar with the IKEv2 protocol, so
      this document skips many details that are described in <xref
      target="RFC7296"></xref>.</t>

      <section title="G-IKEv2 Transport and Port">
        <t>G-IKEv2 SHOULD use UDP port 848, the same as GDOI <xref
        target="RFC6407"></xref>, because they serve a similar function. They
        can use the same ports, just as IKEv1 and IKEv2 can share port 500.
        The version number in the IKE header distinguishes the G-IKEv2
        protocol from GDOI protocol <xref target="RFC6407"></xref>. G-IKEv2
        MAY also use the IKEv2 ports (500, 4500), which would provide a
        better integration with IKEv2. G-IKEv2 MAY also use TCP transport
        for registration (unicast) IKE SA, as defined in <xref target="RFC8229" />.
        </t>
      </section>

      <section title="IKEv2 Header Initialization">
        <t>The Major Version is (2) and Minor Version is (0) according to
        IKEv2 <xref target="RFC7296"></xref>, and maintained in this
        document. The G-IKEv2 IKE_SA_INIT, GSA_AUTH, GSA_REGISTRATION and GSA_INBAND_REKEY 
        use the IKE SPI according to IKEv2 <xref target="RFC7296"></xref>,
        section 2.6.</t>
      </section>
    </section>

    <section title="G-IKEv2 Protocol">
        <section title="G-IKEv2 Payloads">
            <t>In the following descriptions, the payloads contained in the G-IKEv2 
            messages are indicated by names as listed below.</t>

            <figure>
                <preamble></preamble>
                <artwork><![CDATA[
     Notation      Payload 
    ------------------------------------------------------------
     AUTH          Authentication
     CERT          Certificate
     CERTREQ       Certificate Request
     D             Delete
     GSA           Group Security Association
     HDR           IKEv2 Header
     IDg           Identification - Group
     IDi           Identification - Initiator
     IDr           Identification - Responder
     KD            Key Download
     KE            Key Exchange
     Ni, Nr        Nonce
     N             Notify
     SA            Security Association
     SAg           Security Association - GM Supported Transforms
                ]]></artwork>
                <postamble></postamble>
            </figure>

            <t> Payloads defined as part of other IKEv2 extensions MAY also be included in 
            these messages. Payloads that may optionally appear in G-IKEv2 messages
            will be shown in brackets, such as [CERTREQ].
            </t>
    
            <t>G-IKEv2 defines several new payloads not used in IKEv2:</t>
            <t><list style="symbols">
              <t>IDg (Group ID) - The GM requests the GCKS for membership into
              the group by sending its IDg payload.</t>

              <t>GSA (Group Security Association) - The GCKS sends the group
              policy to the GM using this payload.</t>

              <t>KD (Key Download) - The GCKS sends the keys and the security parameters 
              to the GMs using the KD payload.</t>

              <t>SAg (Security Association - GM Supported Transforms) - the GM sends
              supported transforms, so that GCKS may select a policy appropriate for all members 
              of the group.</t>
            </list></t>

            <t> The details of the contents of each payload are described in <xref
            target="header_payload"></xref>. 
            </t>
        </section>
      </section>

      <section title="G-IKEv2 Member Registration and Secure Channel Establishment">
        <t>The registration protocol consists of a minimum of two messages
        exchanges, IKE_SA_INIT and GSA_AUTH; member registration may have a
        few more messages exchanged if the EAP method, cookie challenge (for
        DoS protection) or negotiation of Diffie-Hellman group is included.
        Each exchange consists of request/response pairs. The first exchange
        IKE_SA_INIT is defined in IKEv2 <xref target="RFC7296"></xref>. This
        exchange negotiates cryptographic algorithms, exchanges nonces and
        does a Diffie-Hellman exchange between the group member (GM) and the
        Group Controller/Key Server (GCKS).</t>

        <t>The second exchange GSA_AUTH authenticates the previous messages,
        exchanges identities and certificates. These messages are encrypted
        and integrity protected with keys established through the IKE_SA_INIT
        exchange, so the identities are hidden from eavesdroppers and all
        fields in all the messages are authenticated. The GCKS SHOULD
        authorize group members to be allowed into the group as part of the
        GSA_AUTH exchange. Once the GCKS accepts a group member to join a
        group it will download the data security keys (TEKs) and/or group key
        encrypting key (KEK) or KEK array as part of the GSA_AUTH response
        message. </t>

        <section anchor="gsa_auth" title="GSA_AUTH exchange">
          <t>After the group member and GCKS use the IKE_SA_INIT exchange to
          negotiate cryptographic algorithms, exchange nonces, and perform a
          Diffie-Hellman exchange as defined in IKEv2 <xref
          target="RFC7296"></xref>, the GSA_AUTH exchange MUST complete before
          any other exchanges can be done. The security properties of the
          GSA_AUTH exchange are the same as the properties of the IKE_AUTH
          exchange. It is used to authenticate the IKE_SA_INIT messages,
          exchange identities and certificates. G-IKEv2 also uses this
          exchange for group member registration and authorization. Even
          though the IKE_AUTH does contain the SA2, TSi, and TSr payload the
          GSA_AUTH does not. They are not needed because policy is not
          negotiated between the group member and the GCKS, but instead
          downloaded from the GCKS to the group member.</t>

          <figure title="GSA_AUTH Request" anchor="gsa_auth_request">
              <preamble></preamble>

              <artwork><![CDATA[
 Initiator (Member)                              Responder (GCKS)
--------------------                            ------------------
 HDR, SK{IDi, [CERT,] [CERTREQ,] [IDr,]
          AUTH, IDg, [SAg,] [N]}        -->
              ]]></artwork>
              <postamble></postamble>
          </figure>

          <t>After the IKE_SA_INIT exchange completes, the group member
          initiates a GSA_AUTH request to join a group indicated by the IDg
          payload. The GM MAY include an SAg payload declaring which
          Transforms it is willing to accept. A GM that intends to emit
          data packets SHOULD include a Notify payload status type of SENDER,
          which enables the GCKS to provide any additional policy necessary by
          group senders.</t>

          <figure title="GSA_AUTH Normal Response" anchor="gsa_auth_norm_response">
              <preamble></preamble>

              <artwork><![CDATA[
 Initiator (Member)             Responder (GCKS)
--------------------           ------------------
                          <--   HDR, SK{IDr, [CERT,] 
                                AUTH, [GSA, KD,] [N,] [D]}
              ]]></artwork>
              <postamble></postamble>
          </figure>

          <t> The GCKS responds with IDr, optional CERT, and AUTH
          material as if it were an IKE_AUTH. It also informs the group member
          of the cryptographic policies of the group in the GSA payload and
          the key material in the KD payload. The GCKS can also include a
          Delete (D) payload instructing the group member to delete existing
          SAs it might have as the result of a previous group member
          registration. Note, that since the GCKS generally doesn't know which 
          SAs the GM has, the SPI field in the Delete payload(s) SHOULD be set to zero
          in this case. (See more discussion on the Delete payload in <xref
          target="delete"></xref>.)</t>

          <t> In addition to the IKEv2 error handling, the GCKS can reject the
          registration request when the IDg is invalid or authorization fails,
          etc. In these cases, see <xref target="notify"></xref>, the GSA_AUTH
          response will not include the GSA and KD, but will include a Notify
          payload indicating errors. If the group member included an SAg
          payload, and the GCKS chooses to evaluate it, and it detects that
          that group member cannot support the security policy defined for the
          group, then the GCKS SHOULD return a NO_PROPOSAL_CHOSEN.
          Other types of notifications can be AUTHORIZATION_FAILED or REGISTRATION_FAILED.</t>

          <figure title="GSA_AUTH Error Response" anchor="gsa_auth_err_response">
              <preamble></preamble>
              <artwork><![CDATA[
 Initiator (Member)               Responder (GCKS)
--------------------             ------------------
                           <--   HDR, SK{IDr, [CERT,] AUTH, N}
              ]]></artwork>
              <postamble></postamble>
          </figure>

          <t>If the group member finds the policy sent by the GCKS is
          unacceptable, the member SHOULD initiate GSA_REGISTRATION exchange
          sending IDg and the Notify NO_PROPOSAL_CHOSEN (see <xref target="gsa_registration" />)).
          </t>
        </section>

        <section anchor="gsa_registration" title="GSA_REGISTRATION Exchange ">
          <t>When a secure channel is already established between a GM and the
          GCKS, the GM registration for a group can reuse the established
          secure channel. In this scenario the GM will use the
          GSA_REGISTRATION exchange. Payloads in the exchange are generated
          and processed as defined in <xref target="gsa_auth"></xref>.</t>

          <figure title="GSA_REGISTRATION Normal Exchange" anchor="gsa_registration_exchange">
              <preamble></preamble>
              <artwork><![CDATA[
 Initiator (Member)               Responder (GCKS)
--------------------             ------------------
 HDR, SK{IDg, [SAg,][N ]} -->
                             <--  HDR, SK{GSA,] [N,] [D]}
              ]]></artwork>
              <postamble></postamble>
          </figure>

          <t>As with GSA_AUTH exchange, the GCKS can reject the
          registration request when the IDg is invalid or authorization fails,
          or GM cannot support the security policy defined for the
          group (which can be concluded by GCKS by evaluation of SAg payload).
          In this case the GCKS returns an appropriate error notification
          as described in <xref target="gsa_auth" />.
          </t>

          <figure title="GSA_REGISTRATION Error Exchange" anchor="gsa_registration_err_exchange">
              <preamble></preamble>
              <artwork><![CDATA[
 Initiator (Member)                Responder (GCKS)
--------------------              ------------------
 HDR, SK{IDg, [SAg,] [N]} -->
                            <--    HDR, SK{N}
              ]]></artwork>
              <postamble></postamble>
            </figure>

          <t>This exchange can also be used if the group member finds the
          policy sent by the GCKS is unacceptable or for some reason wants to unregister 
          itself from the group. The group member SHOULD
          notify the GCKS by sending IDg and the Notify type
          NO_PROPOSAL_CHOSEN or REGISTRATION_FAILED, as shown below. 
          The GCKS MUST unregister the group member.</t>

          <figure title="GM Reporting Errors in GSA_REGISTRATION Exchange" anchor="gsa_registration_gm_error">
              <preamble></preamble>
              <artwork><![CDATA[
 Initiator (Member)                 Responder (GCKS)
--------------------               ------------------
 HDR, SK{IDg, N}      -->
                         <--        HDR, SK{}
            ]]></artwork>
            </figure>
        </section>

        <section title="GM Registration Operations">
          <t>A G-IKEv2 Initiator (GM) requesting registration contacts the
          GCKS using the IKE_SA_INIT exchange and receives the response from
          the GCKS. This exchange is unchanged from the IKE_SA_INIT in IKEv2
          protocol.</t>

          <t>Upon completion of parsing and verifying the IKE_SA_INIT
          response, the GM sends the GSA_AUTH message with the IKEv2 payloads
          from IKE_AUTH (without the SAi2, TSi and TSr payloads) along with
          the Group ID informing the GCKS of the group the initiator wishes to
          join. An initiator intending to emit data traffic SHOULD send a
          SENDER Notify payload status. The SENDER not only signifies that it
          is a sender, but provides the initiator the ability to request
          Sender-ID values, in case the data security SA supports a counter
          mode cipher. <xref target="counter-modes"></xref>) includes guidance
          on requesting Sender-ID values.</t>

          <t>A GM may be limited in the types of Transforms that it is
          able or willing to use, and may find it useful to inform the GCKS
          which Transforms it is willing to accept for different security protocols. 
          Proposals for Rekey SA (with protocol GIKE_REKEY) and for data security 
          (AH <xref target="RFC4302" /> and/or ESP <xref target="RFC4303" />) SAs 
          may be included into SAg. Each Proposal contains a list of Transforms that the GM is able to
          support for that protocol. Valid transform types depend on the 
          protocol and are defined in <xref target="allowed_transforms" />.
          Other transform types SHOULD NOT be included.
          The SPI length of each Proposal in an SAg is set to zero, and thus the SPI field is empty. 
          The GCKS MUST ignore SPI field in the SAg payload. 
          </t>
          
          <t>Generally, a single Proposal of each 
          type will suffice, because the group member is not negotiating Transform sets, 
          simply alerting the GCKS to restrictions it may have.
          In particular, the restriction from Section 3.3 of <xref target="RFC7296" /> that 
          AEAD and non-AEAD transforms must not be combined in a single proposal
          doesn't hold when the SAg payload is being formed. However 
          if the GM has restrictions on combination of algorithms,
          this can be expressed by sending several proposals.</t>

          <t>Proposal Num field in Proposal substructure is treated specially in SAg payload:
          it allows a GM to indicate that algorithms used in Rekey SA and in 
          data security (AH and/or ESP) SAs are dependent.
          In particular, Proposals of different types having the same value in
          Proposal Num field are treated as a set, so that if GCKS uses transforms
          from one of such Proposal for one protocol, then it MUST only use transforms from 
          one of the Proposals with the same value in Proposal Num field for other protocols.
          For example, a GM may support algorithms X and Y for both Rekey and
          data security SAs, but with a restriction that if X is used in Rekey SA, then only X can be used
          in data security SAs, and the same for Y. 
          To indicate this the GM sends several Proposals marking those of them that must be used in conjunction
          by putting the same value in their Proposal Num field. 
          In the simplest case when no dependency between transforms exists,
          all Proposals in SAg payload will have the same value in Proposal Num field.
          </t>

          <t>Although the SAg payload is optional, it is RECOMMENDED for the GM to include
          this payload into the GSA_AUTH request to allow the GCKS to select an appropriate policy.
          </t>
          
          <t>A GM may also indicate the support for IPcomp by inclusion one or more the IPCOMP_SUPPORTED
          notifications along with the SAg payload. The CPI in these notifications is set to zero
          and MUST be ignored by the GCKS.
          </t>

          <t>Upon receiving the GSA_AUTH response, the initiator parses the
          response from the GCKS authenticating the exchange using the IKEv2
          method, then processes the GSA and KD.</t>

          <t>The GSA payload contains the security policy and cryptographic
          protocols used by the group. This policy describes the Rekey SA
          (KEK), Data-security SAs (TEK), and other group policy
          (GAP). If the policy in the GSA payload is not acceptable to the GM,
          it SHOULD notify the GCKS by initiating a GSA_REGISTRATION exchange 
          with a NO_PROPOSAL_CHOSEN Notify payload (see <xref target="gsa_registration"></xref>). 
          Note, that this should normally not happen if the GM includes SAg payload 
          in the GSA_AUTH request and the GCKS takes it into account.
          Finally the KD are parsed providing the keying material for the TEK and/or KEK. The GM
          interprets the KD key packets, where each key packet includes the
          keying material for SAs distributed in the GSA payload. Keying
          material is matched by comparing the SPIs in the key packets to SPIs
          previously included in the GSA payloads. Once TEK keys and policy
          are matched, the GM provides them to the data security subsystem,
          and it is ready to send or receive packets matching the TEK
          policy.</t>

          <t>The GSA KEK policy MUST include the attribute GSA_INITIAL_MESSAGE_ID with
          a first Message ID the GM should expect to receive if it is non-zero.
          The value of the attribute MUST be checked by a GM against any previously received Message ID for this group.
          If it is less than the previously received number, it should be
          considered stale and ignored. This could happen if two GSA_AUTH
          exchanges happened in parallel, and the Message ID changed. This
          attribute is used by the GM to prevent GSA_REKEY message replay
          attacks. The first GSA_REKEY message that the GM receives from the
          GCKS must have a Message ID greater or equal to the Message ID
          received in the GSA_INITIAL_MESSAGE_ID attribute.</t>

          <t>Once a GM has received GSA_REKEY policy during a registration the IKE SA
          may be closed. However, the GM SHOULD NOT close IKE SA, it is the GCKS
          who makes the decision whether to close or keep it, because depending on the policy 
          the IKE SA may be used for inband rekeying for small groups.</t>
        </section>

        <section title="GCKS Registration Operations">
          <t>A G-IKEv2 GCKS passively listens for incoming requests from group
          members. When the GCKS receives an IKE_SA_INIT request, it selects
          an IKE proposal and generates a nonce and DH to include them in the
          IKE_SA_INIT response.</t>

          <t>Upon receiving the GSA_AUTH request, the GCKS authenticates the
          group member using the same procedures as in the IKEv2 IKE_AUTH. The
          GCKS then authorizes the group member according to group policy
          before preparing to send the GSA_AUTH response. If the GCKS fails to
          authorize the GM, it will respond with an AUTHORIZATION_FAILED
          notify message.</t>

          <t>The GSA_AUTH response will include the group policy in the GSA
          payload and keys in the KD payload. If the GCKS policy includes a
          group rekey option, this policy is constructed in the GSA KEK and
          the key is constructed in the KD KEK. The GSA KEK MUST include the
          GSA_INITIAL_MESSAGE_ID attribute, specifying the starting Message ID the
          GCKS will use when sending the GSA_REKEY message to the group
          member if this Message ID is non-zero. This Message ID is used to prevent GSA_REKEY 
          message replay attacks and will be increased each time a GSA_REKEY message is sent
          to the group. The GCKS data traffic policy is included in the GSA
          TEK and keys are included in the KD TEK. The GAP MAY also be
          included to provide the ATD and/or DTD (<xref target="gap_attr_atd_dtd"></xref>) 
          specifying activation and deactivation
          delays for SAs generated from the TEKs. If the group member has
          indicated that it is a sender of data traffic and one or more Data
          Security SAs distributed in the GSA payload included a counter mode
          of operation, the GCKS responds with one or more SIDs (see <xref
          target="counter-modes"></xref>).</t>

          <t>If the GCKS receives a GSA_REGISTRATION exchange with a request
          to register a GM to a group, the GCKS will need to authorize the GM
          with the new group (IDg) and respond with the corresponding group
          policy and keys. If the GCKS fails to authorize the GM, it will
          respond with the AUTHORIZATION_FAILED notification.</t>

          <t>If a group member includes an SAg in its GSA_AUTH or
          GSA_REGISTRATION request, the GCKS MAY evaluate it according to an
          implementation specific policy.
            <list style="symbols">
              <t>The GCKS could evaluate the list of Transforms and compare it
              to its current policy for the group. If the group member did not
              include all of the ESP or AH Transforms in its current policy,
              then it could return a NO_PROPOSAL_CHOSEN Notification.</t>

              <t>The GCKS could store the list of Transforms, with the goal of
              migrating the group policy to a different Transform when all of
              the group members indicate that they can support that
              Transform.</t>

              <t>The GCKS could store the list of Transforms and adjust the
              current group policy based on the capabilities of the devices as
              long as they fall within the acceptable security policy of the
              GCKS.</t>
            </list>
          Depending on its policy, the GCKS may have no need for the
          IKE SA (e.g., it does not plan to initiate an GSA_INBAND_REKEY
          exchange). If the GM does not initiate another registration exchange
          or Notify (e.g., NO_PROPOSAL_CHOSEN), and also does not close the
          IKE SA and the GCKS is not intended to use the SA, then after a
          short period of time the GCKS SHOULD close the IKEv2 SA. The delay
          before closing provides for receipt of a GM's error notification in
          the event of packet loss.</t>
        </section>

        <section title="Group Maintenance Channel">
          <t>The GCKS is responsible for rekeying the secure group per the group
          policy. Rekeying is an operation whereby the GCKS provides replacement
          TEKs and KEK, deleting TEKs, and/or excluding group members. The GCKS
          may initiate a rekey message if group membership and/or policy has
          changed, or if the keys are about to expire. Two forms of group
          maintenance channels are provided in G-IKEv2 to push new policy to
          group members.</t>

          <t><list style="hanging">
            <t hangText="GSA_REKEY">The GSA_REKEY is a pseudo-exchange
            initiated by the GCKS, where the rekey policy is usually delivered
            to group members using IP multicast as a transport. This is not
            a real IKEv2 exchange, since no response messages are sent. This method is
            valuable for large and dynamic groups, and where policy may change
            frequently and a scalable rekeying method is required. When the
            GSA_REKEY is used, the IKEv2 SA protecting the member
            registration exchanges is usually terminated, and group members await
            policy changes from the GCKS via the GSA_REKEY messages.</t>

            <t hangText="GSA_INBAND_REKEY">The GSA_INBAND_REKEY is a
            normal IKEv2 exchange using the IKEv2 SA that was setup to protecting the
            member registration exchange. This exchange allows the GCKS to
            rekey without using an independent GSA_REKEY pseudo-exchange. The
            GSA_INBAND_REKEY exchange provides a reliable policy delivery and 
            is useful when G-IKEv2 is used with a small group of cooperating devices.</t>
          </list>

          Depending on the policy the GCKS may combine these two methods.
          For example, it may use the GSA_INBAND_REKEY to deliver key to the 
          GMs in the group acting as senders (as this would provide reliable keys delivery), 
          and the GSA_REKEY for the rest GMs.
          </t>

          <section title="GSA_REKEY">
            <t>The GCKS initiates the G-IKEv2 Rekey securely, usually using IP
            multicast. Since this rekey does not require a response and it sends
            to multiple GMs, G-IKEv2 rekeying MUST NOT support IKE SA windowing.
            The GCKS rekey message replaces the rekey GSA KEK or KEK array,
            and/or creates a new Data-Security GSA TEK. The SID Download
            attribute in the Key Download payload (defined in <xref
            target="mkd_attr_gm_sid"></xref>) MUST NOT be part of the Rekey
            Exchange as this is sender specific information and the Rekey
            Exchange is group specific. The GCKS initiates the GSA_REKEY
            pseudo-exchange as following:</t>

            <t><figure title="GSA_REKEY Pseudo-Exchange" anchor="gsa_rekey_exchange">
              <preamble></preamble>

              <artwork><![CDATA[
 Members (Responder)           GCKS (Initiator)
--------------------          ------------------
                          <--  HDR, SK{GSA, KD, [N,] [D,] [AUTH]}
              ]]></artwork>
              <postamble></postamble>
            </figure></t>

            <t>HDR is defined in <xref target="header"></xref>. The Message ID
            in this message will start with the value the GCKS sent to the
            group members in the KEK attribute GSA_INITIAL_MESSAGE_ID or from
            zero if this attribute wasn't sent. The Message ID will be incremented each time a new
            GSA_REKEY message is sent to the group members.</t>

            <t>The GSA payload contains the current rekey and data security SAs.
            The GSA may contain a new rekey SA and/or a new data security SA 
            <xref target="gsa_payload"></xref>.</t>

            <t>The KD payload contains the keys for the policy included in the
            GSA. If the data security SA is being refreshed in this rekey
            message, the IPsec keys are updated in the KD, and/or if the rekey
            SA is being refreshed in this rekey message, the rekey Key or the
            LKH KEK array is updated in the KD payload.</t>

            <t>A Delete payload MAY be included to instruct the GM to delete
            existing SAs.</t>

            <t>The AUTH payload MUST be included to authenticate the GSA_REKEY
            message if the authentication method is based on public key signatures
            or a dedicated shared secret and MUST NOT be included if authentication is implicit.
            In a latter case, the fact that a GM can decrypt the GSA_REKEY message and verify its ICV 
            proves that the sender of this message knows the current KEK,
            thus authenticating that the sender is a member of the group. 
            Shared secret and implicit authentication don't provide source origin authentication.
            For this reason using them as authentication methods for GSA_REKEY is NOT RECOMMENDED 
            unless source origin authentication is not required (for example, in a small group of
            highly trusted GMs). If AUTH payload is included then the Auth Method field MUST NOT 
            be NULL Authentication.</t>
          
            <t> During group member registration, the GCKS
            sends the authentication key in the GSA KEK payload, AUTH_KEY
            attribute, which the group member uses to authenticate the key
            server. Before the current Authentication Key expires, the GCKS will
            send a new AUTH_KEY to the group members in a GSA_REKEY message.
            The AUTH key that is used in the rekey message may be not the same
            as the authentication key used in GSA_AUTH. If implicit authentication
            is used, then AUTH_KEY MUST NOT be sent to GMs.</t>

            <section anchor="gsa_rekey_auth" title="GSA_REKEY Messages Authentication">
              <t>The content of the AUTH payload depends on the authentication method and is either
              a digital signature or a result of prf applied to the content of the not yet encrypted GSA_REKEY message.
              </t>

              <t>The authentication algorithm (prf or digital signing) is applied to the concatenation of two chunks: A and P. 
              The chunk A lasts from the first octet of the G-IKEv2 Header (not including prepended four octets of zeros, if port 4500 is used) 
              to the last octet of the Encrypted Payload header. The chunk P consists of the not yet encrypted content of the Encrypted payload, excluding 
              the Initialization Vector, the Padding, the Pad Length and the Integrity Checksum Data fields (see 3.14 of <xref target="RFC7296" /> for description 
              of the Encrypted payload). In other words, the P chunk is the inner payloads of the Encrypted payload in plaintext form. 
              These inner payloads must be fully formed and ready for encryption except for the AUTH payload.
              <xref target="auth_data" /> illustrates the layout of the P and A chunks in the GSA_REKEY message.
              </t>

              <t>The AUTH payload must have correct values in the Payload Header, the Auth Method and the RESERVED fields.
              The Authentication Data field is zeroed, but if Digital Signature authentication 
              method is in use, then the ASN.1 Length and the AlgorithmIdentifier fields must be properly filled in, see <xref target="RFC7427" />. 
              </t>

              <t>For the purpose of the AUTH payload calculation the Length field in the IKE header and the Payload Length 
              field in the Encrypted Payload header are adjusted so that they don't count the lengths
              of Initialization Vector, Integrity Checksum Data and Padding (along with Pad Length field).
              In other words, the Length field in the IKE header (denoted as AdjustedLen in  
              <xref target="auth_data" /> ) is set to the sum of the lengths of A and P, and the Payload Length
              field in the Encrypted Payload header (denoted as AdjustedPldLen in 
              <xref target="auth_data" />) is set to the length of P plus the size of the Payload header (four octets).
              </t>

              <figure align="center">
                <artwork align="left"><![CDATA[
DataToAuthenticate = A | P
GsaRekeyMessage = GenIKEHDR | EncPayload
GenIKEHDR = [ four octets 0 if using port 4500 ] | AdjustedIKEHDR
AdjustedIKEHDR =  SPIi | SPIr |  . . . | AdjustedLen
EncPayload = AdjustedEncPldHdr | IV | InnerPlds | Pad | PadLen | ICV
AdjustedEncPldHdr = NextPld | C | RESERVED | AdjustedPldLen
A = AdjustedIKEHDR | AdjustedEncPldHdr
P = InnerPlds
              ]]></artwork>
              </figure>

              <figure align="center" anchor="auth_data" title="Data to Authenticate in the GSA_REKEY Messages">
                <artwork align="left"><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ^ ^
|                     G-IKEv2 SA Initiator's SPI                | | |
|                                                               | | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ I |
|                     G-IKEv2 SA Responder's SPI                | K |
|                                                               | E |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |
|  Next Payload | MjVer | MnVer | Exchange Type |     Flags     | H A
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ d |
|                           Message ID                          | r |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | |
|                          AdjustedLen                          | | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ x |
| Next Payload  |C|  RESERVED   |         AdjustedPldLen        | | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | v
|                                                               | |
~                     Initialization Vector                     ~ E
|                                                               | n
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ c ^
|                                                               | r |
~             Inner payloads (not yet encrypted)                ~   P
|                                                               | P |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ l v
~              Padding (0-255 octets)           |  Pad Length   | d
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
|                                                               | |
~                    Integrity Checksum Data                    ~ |
|                                                               | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ v
              ]]></artwork>
              </figure>

              <t>The authentication data is calculated using the authentication algorithm from the Authentication Method transform
              and the key provided before in the AUTH_KEY attribute. Depending on the authentication method
              the authentication data is either a digital signature or a result of applying prf from the Pseudorandom Function transform.
              The calculated authentication data is placed into the AUTH payload, the Length fields in the IKE Header and the Encryption Payload
              header are restored,  the content of the Encrypted payload is encrypted and the ICV is computed using the current SKe/SKa keys.
              </t>

              <t> The calculation of authentication data MUST be applied to whole messages only, before possible IKE Fragmentation. 
              If the message was received in fragmented form, it should be reconstructed before verifying its authenticity as if it were received unfragmented.
              The RESERVED field in the reconstructed Encrypted Payload header MUST be set to the value of the RESERVED 
              field in the Encrypted Fragment payload header from the first fragment (that with Fragment Number equal to 1).
              </t>
            </section>

            <section title="GSA_REKEY GCKS Operations">
              <t>The GCKS builds the rekey message with a Message ID value that
              is one greater than the value included in the previous rekey. If
              the message is using a new KEK attribute, the Message ID is reset
              to 0 <!-- was 1 ZZZZ --> in this message. The GSA, KD, N and D payloads follow with the
              same characteristics as in the GSA Registration exchange. </t>

              <t>The AUTH payload (if present) is created as defined in <xref target="gsa_rekey_auth" />. 
              </t>

              <t>Because GSA_REKEY messages are not acknowledged and could be
              discarded by the network, one or more GMs may not receive the
              message. To mitigate such lost messages, during a rekey event the
              GCKS may transmit several GSA_REKEY messages with the new
              policy. The retransmitted messages MUST be bitwise identical and SHOULD be
              sent within a short time interval (a few seconds) to ensure 
              that time-to-live would not be substantially skewed for the GMs that 
              would receive different copies of the messages. </t>

              <t> GCKS may also include one or several GSA_NEXT_SPI
              attributes specifying SPIs for the prospected rekeys, so that
              listening GMs are able to detect lost rekey messages and recover
              from this situation. See Sections <xref target="gsa_attr_next_spi" /> for more detail.
              </t>
            </section>

            <section title="GSA_REKEY GM Operations">
              <t>When a group member receives the Rekey Message from the GCKS it
              decrypts the message using the current KEK, validates its authenticity
              using the key retrieved in a previous G-IKEv2 exchange if AUTH payload is present, 
              verifies the Message ID, and processes the GSA and KD
              payloads. The group member then downloads the new data security SA
              and/or new rekey SA. The parsing of the payloads is identical to
              the parsing done in the registration exchange.</t>

              <t>Replay protection is achieved by a group member rejecting a
              GSA_REKEY message which has a Message ID smaller than the current
              Message ID that the GM is expecting. The GM expects the Message ID
              in the first GSA_REKEY message it receives to be equal or greater
              than the Message ID it receives in the GSA_INITIAL_MESSAGE_ID attribute.
              Note, that if no this attribute was received for the Rekey SA, the GM 
              MUST assume zero as the first expected Message ID.
              The GM expects the Message ID in subsequent GSA_REKEY messages to
              be greater than the last valid GSA_REKEY message ID it
              received.</t>

              <t>If the GSA payload includes a Data-Security SA including a
              counter-modes of operation and the receiving group member is a
              sender for that SA, the group member uses its current SID value
              with the Data-Security SAs to create counter-mode nonces. If it is
              a sender and does not hold a current SID value, it MUST NOT
              install the Data-Security SAs. It MAY initiate a GSA_REGISTRATION
              exchange to the GCKS in order to obtain an SID value (along with
              current group policy).</t>

              <t>Once a new Rekey SA is installed as a result of GSA_REKEY
              message, the current Rekey SA (over which the message was received)
              MUST be silently deleted after waiting DEACTIVATION_TIME_DELAY interval 
              regardless of its expiration time. If the GSA TEK payload includes GSA_REKEY_SPI attribute
              then after installing a new Data-Security SA the old one, identified
              by the SPI in this attribute, MUST be silently deleted 
              after waiting DEACTIVATION_TIME_DELAY interval regardless of its expiration time.
              </t>

              <t>If a Data-Security SA is not rekeyed yet and is 
              about to expire (a "soft lifetime" expiration is described
              in Section 4.4.2.1 of <xref target="RFC4301"></xref>), the GM SHOULD
              initiate a registration to the GCKS. This registration serves as a
              request for current SAs, and will result in the download of
              replacement SAs, assuming the GCKS policy has created them.
              A GM SHOULD also initiate a registration request if a Rekey SA
              is about to expire and not yet replaced with a new one.</t>
            </section>

            <section title="IKE Fragmentation">
              <t>IKE fragmentation <xref target="RFC7383"></xref> can be used to
              perform fragmentation of large GSA_REKEY messages, however when
              the GSA_REKEY message is emitted as an IP multicast packet there
              is a lack of response from the GMs. This has the following
              implications.<list style="symbols">

                <t>Policy regarding the use of IKE fragmentation is implicit.
                If a GCKS detects that all GMs have negotiated support of IKE
                fragmentation in IKE_SA_INIT, then it MAY use IKE
                fragmentation on large GSA_REKEY messages.</t>

                <t>The GCKS must always use IKE fragmentation based on a known
                fragmentation threshold (unspecified in this memo), as there
                is no way to check if fragmentation is needed by first sending
                unfragmented messages and waiting for response.</t>

                <t>PMTU probing cannot be performed due to lack of GSA_REKEY
                response message.</t>

              </list></t>
            </section>
          </section>

          <section title="GSA_INBAND_REKEY Exchange">
            <t>When the IKEv2 SA protecting the member registration exchange is
            maintained while group member participates in the group, the GCKS
            can use the GSA_INBAND_REKEY exchange to individually provide policy
            updates to the group member.</t>

            <figure title="GSA_INBAND_REKEY Exchange" anchor="gsa_inband_rekey_exchange">
              <artwork><![CDATA[
 Member (Responder)            GCKS (Initiator)
--------------------          ------------------
                        <--    HDR, SK{GSA, KD, [N,] [D]}
   HDR, SK{}            -->
          ]]></artwork>
            </figure>

            <t>Because this is a normal IKEv2 exchange, the HDR is treated as defined
            in <xref target="RFC7296"></xref>.</t>

            <section title="GSA_INBAND_REKEY GCKS Operations">
              <t>The GSA, KD, N and D payloads are built in the same manner as in
              a registration exchange.</t>
            </section>

            <section title="GSA_INBAND_REKEY GM Operations">
              <t>The GM processes the GSA, KD, N and D payloads in the same manner
              as if they were received in a registration exchange.</t>
            </section>
          </section>

          <section title="Deletion of SAs">
            <t>There are occasions when the GCKS may want to signal to group
            members to delete policy at the end of a broadcast, or if group
            policy has changed. Deletion of keys MAY be accomplished by sending
            the G-IKEv2 Delete Payload <xref target="RFC7296"></xref>, section
            3.11 as part of the GSA_REKEY pseudo-exchange as shown below.</t>

            <t><figure title="SA Deletion in GSA_REKEY" anchor="gsa_rekey_sa_deletion">
              <preamble></preamble>
              <artwork><![CDATA[
 Members (Responder)        GCKS (Initiator)
--------------------       ------------------
                      <--   HDR, SK{[GSA,] [KD,], [N] [D,] [AUTH]}
              ]]></artwork>
              <postamble></postamble>
            </figure></t>

            <t>The GSA MAY specify the remaining active time of the remaining
            policy by using the DTD attribute in the GSA GAP. If a GCKS has no
            further SAs to send to group members, the GSA and KD payloads MUST
            be omitted from the message. There may be circumstances where the
            GCKS may want to start over with a clean state. If the administrator
            is no longer confident in the integrity of the group, the GCKS can
            signal deletion of all the policies of a particular TEK protocol by
            sending a TEK with a SPI value equal to zero in the delete payload.
            For example, if the GCKS wishes to remove all the KEKs and all the
            TEKs in the group, the GCKS SHOULD send a Delete payload with a SPI
            of zero and Protocol ID of AH or ESP, followed by another Delete payload
            with a SPI of zero and Protocol ID of GIKE_REKEY, indicating that the KEK
            SA should be deleted.</t>
          </section>
        </section>

        <section anchor="counter-modes" title="Counter-based modes of operation">
          <t>Several new counter-based modes of operation have been specified
          for ESP (e.g., AES-CTR <xref target="RFC3686"></xref>, AES-GCM <xref
          target="RFC4106"></xref>, AES-CCM <xref target="RFC4309"></xref>,
          ChaCha20-Poly1305 <xref target="RFC7634"></xref>,
          AES-GMAC <xref target="RFC4543"></xref>) and AH (e.g., AES-GMAC <xref
          target="RFC4543"></xref>). These counter-based modes require that no
          two senders in the group ever send a packet with the same
          Initialization Vector (IV) using the same cipher key and mode. This
          requirement is met in G-IKEv2 when the following requirements are
          met:
          <list style="symbols">

          <t>The GCKS distributes a unique key for each Data-Security SA.</t>

          <t>The GCKS uses the method described in <xref
          target="RFC6054"></xref>, which assigns each sender a portion of the
          IV space by provisioning each sender with one or more unique SID
          values.</t>

          </list></t>

          <section title="Allocation of SIDs">
            <t>When at least one Data-Security SA included in the group policy
            includes a counter-based mode of operation, the GCKS automatically
            allocates and distributes one SID to each group member acting in the
            role of sender on the Data-Security SA. The SID value is used
            exclusively by the group member to which it was allocated. The group
            member uses the same SID for each Data-Security SA specifying the
            use of a counter-based mode of operation. A GCKS MUST distribute
            unique keys for each Data-Security SA including a counter-based mode
            of operation in order to maintain unique key and nonce usage.</t>

            <t>During registration, the group member can choose to request one
            or more SID values. Requesting a value of 1 is not necessary since
            the GCKS will automatically allocate exactly one to the group
            member. A group member MUST request as many SIDs matching the number
            of encryption modules in which it will be installing the TEKs in the
            outbound direction. Alternatively, a group member MAY request more
            than one SID and use them serially. This could be useful when it is
            anticipated that the group member will exhaust their range of Data-
            Security SA nonces using a single SID too quickly (e.g., before the
            time-based policy in the TEK expires).</t>

            <t>When the group policy includes a counter-based mode of operation,
            a GCKS SHOULD use the following method to allocate SID values, which
            ensures that each SID will be allocated to just one group
            member.<list style="numbers">

            <t>A GCKS maintains an SID-counter, which records the SIDs that
            have been allocated. SIDs are allocated sequentially, with zero as
            the first allocated SID.</t>

            <t>Each time an SID is allocated, the current value of the
            counter is saved and allocated to the group member. The SID-counter
            is then incremented in preparation for the next allocation.</t>

            <t>When the GCKS specifies a counter-based mode of operation in
            the data security SA a group member may request a count of SIDs
            during registration in a Notify payload information of type SENDER.
            When the GCKS receives this request, it increments the SID-counter
            once for each requested SID, and distributes each SID value to the
            group member. The GCKS SHOULD have a policy-defined upper bound for
            the number of SIDs that it will return irrespective of the number
            requested by the GM.</t>

            <t>A GCKS allocates new SID values for each GSA_REGISTRATION
            exchange originated by a sender, regardless of whether a group
            member had previously contacted the GCKS. In this way, the GCKS is
            not required to maintaining a record of which SID values it had
            previously allocated to each group member. More importantly, since
            the GCKS cannot reliably detect whether the group member had sent
            data on the current group Data-Security SAs it does not know what
            Data-Security counter-mode nonce values that a group member has
            used. By distributing new SID values, the key server ensures that
            each time a conforming group member installs a Data-Security SA it
            will use a unique set of counter-based mode nonces.</t>

            <t>When the SID-counter maintained by the GCKS reaches its final
            SID value, no more SID values can be distributed. Before
            distributing any new SID values, the GCKS MUST delete the
            Data-Security SAs for the group, followed by creation of new
            Data-Security SAs, and resetting the SID-counter to its initial
            value.</t>

            <t>The GCKS SHOULD send a GSA_REKEY message deleting all Data-
            Security SAs and the Rekey SA for the group. This will result in the
            group members initiating a new GSA_REGISTRATION exchange, in which
            they will receive both new SID values and new Data-Security SAs. The
            new SID values can safely be used because they are only used with
            the new Data-Security SAs. Note that deletion of the Rekey SA is
            necessary to ensure that group members receiving a GSA_REKEY
            message before the re-register do not inadvertently use their old
            SIDs with the new Data-Security SAs. Using the method above, at no
            time can two group members use the same IV values with the same
            Data-Security SA key.</t>

            </list></t>
          </section>

          <section anchor="sid-usage" title="GM Usage of SIDs">
            <t>A GM applies the SID to data security SA as follows.
            <list style="symbols">

            <t>The most significant bits NUMBER_OF_SID_BITS of the IV are
            taken to be the SID field of the IV.</t>

            <t>The SID is placed in the least significant bits of the SID
            field, where any unused most significant bits are set to zero.
            If the SID value doesn't fit into the NUMBER_OF_SID_BITS bits,
            then the GM MUST treat this as a fatal error and re-register to the group.
            </t>

            </list></t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="key_management" title="Group Key Management and Access Control">
      <t>Through the G-IKEv2 rekey, G-IKEv2 supports algorithms such as
      Logical Key Hierarchy (LKH) that have the property of denying access to a new group key by
      a member removed from the group (forward access control) and to an
      old group key by a member added to the group (backward access
      control). An unrelated notion to PFS, "forward access control" and
      "backward access control" have been called "perfect forward
      security" and "perfect backward security" in the literature <xref
      target="RFC2627"></xref>.</t>

      <t>Group management algorithms providing forward and backward
      access control other than LKH have been proposed in the
      literature, including OFT <xref target="OFT"></xref> and Subset
      Difference <xref target="NNL"></xref>. These algorithms could be
      used with G-IKEv2, but are not specified as a part of this
      document.</t>

      <t>The Group Key Management Method transform from the GSA 
      policy specifies how members of the group obtain group keys. 
      This document specifies a single method for the group key management - 
      Wrapped Key Download. This method assumes that all group keys are
      sent to the GMs by the GCKS encrypted with other keys,
      called Key Wrap Keys (KWK).
      </t>

      <section anchor="kwk" title="Key Wrap Keys">
        <t>Every GM always knows 
        at least one KWK - the KWK that is associated with the IKE SA
        or multicast rekey SA the wrapped keys are sent over.
        In this document it is called default KWK and is denoted as SK_w.
        </t>

        <t>The GCKS may also send other keys to GMs that will be used as Key Wrap Keys
        for the purpose of building key hierarchy. Each such key is associated
        with an encryption algorithm from the Encryption Algorithm transform
        used for the SA the key is sent in. 
        The size of such key MUST be of the size of the key size of this Encryption Algorithm 
        transform (taking into consideration the Key Length attribute for this transform if present).
        This association persists even if the key is used later in the context of another 
        SA with possibly different Encryption Algorithm transform.
        </t>

        <t>To have an ability to provide forward access control the GCKS provides each GM 
        with a personal key at the time of registration.
        Besides several intermediate keys that form a key 
        hierarchy and are shared among several GMs are provided by the GCKS.
        </t>

        <section anchor="sk_w" title="Default Key Wrap Key">
          <t>The default KWK (SK_w) is only used in the context of a single IKE SA.
          Every IKE SA (unicast or group rekey) will have its own SK_w.
          The SK_w is used with the algorithm from the Encryption Algorithm 
          transform used for the SA the SK_w is used in.
          The size of SK_w MUST be of the key size
          of this Encryption Algorithm transform (taking into consideration
          the Key Length attribute for this transform if present).
          </t>

          <t>For the unicast IKE SA (used for the GM registration 
          and optionally for GSA_INBAND_REKEY exchanges)
          the SK_w is computed as follows:

          <figure >
            <artwork><![CDATA[
SK_w = prf+(SK_d, "Key Wrap for G-IKEv2")
            ]]></artwork>
          </figure>

          where the string "Key Wrap for G-IKEv2" is 20 ASCII characters
          without null termination.
          </t>

          <t>For the multicast rekey SA the SK_w is provided along with
          other SA keys as defined in <xref target="group_sa_keys" />.
          </t>
        </section>
      </section>

      <section anchor="key_gcks_semantics" title="GCKS Key Management Semantics">
        <t>Wrapped Key Download method allows the GCKS
        to employ various key management policies.
        <list style="symbols">
          <t>A simple key management policy - when the GCKS always sends
          group SA keys encrypted with the SK_w.  
          </t>
          <t>An LKH key management policy - when the GCKS provides 
          each GM with an individual key at the time of GM registration
          (encrypted with SK_w). Then the GCKS forms an hierarchy of keys so that the group
          SA keys are encrypted with other keys which are encrypted with other keys and so on, 
          tracing back to the individual GMs' keys.
          </t>
        </list>
        Other key policies may also be employed by the GCKS.
        </t>

        <section title="Forward Access Control Requirements">
          <t>When group membership is altered using a group management
          algorithm new GSA TEKs (and their associated keys) are usually
          also needed. New GSAs and keys ensure that members who were
          denied access can no longer participate in the group.</t>

          <t>If forward access control is a desired property of the group,
          new GSA TEKs and the associated key packets in the KD payload
          MUST NOT be included in a G-IKEv2 rekey message which changes
          group membership. This is required because the GSA TEK policy
          and the associated key packets in the KD payload are not
          protected with the new KEK. A second G-IKEv2 rekey message can
          deliver the new GSA TEKS and their associated key packets
          because it will be protected with the new KEK, and thus will not
          be visible to the members who were denied access.</t>

          <t>If forward access control policy for the group includes
          keeping group policy changes from members that are denied access
          to the group, then two sequential G-IKEv2 rekey messages
          changing the group KEK MUST be sent by the GCKS. The first
          G-IKEv2 rekey message creates a new KEK for the group. Group
          members, which are denied access, will not be able to access the
          new KEK, but will see the group policy since the G-IKEv2 rekey
          message is protected under the current KEK. A subsequent G-IKEv2
          rekey message containing the changed group policy and again
          changing the KEK allows complete forward access control. A
          G-IKEv2 rekey message MUST NOT change the policy without
          creating a new KEK.</t>

          <t>If other methods of using LKH or other group management
          algorithms are added to G-IKEv2, those methods MAY remove the
          above restrictions requiring multiple G-IKEv2 rekey messages,
          providing those methods specify how the forward access control
          policy is maintained within a single G-IKEv2 rekey message.</t>
        </section>
      </section>

      <section anchor="keys_gm_semantics" title="GM Key Management Semantics">
        <t>This specification defines a GM Key Management semantics
        in such a way, that it doesn't depend on the key management
        policy employed by the GCKS. This allows having all the complexity
        of key management in the GCKS, which is free to implement various
        key management policies, such as direct transmitting of group SA
        keys or using some kind of key hierarchy (e.g. LKH). 
        For all these policies the GMs' behavior is the same.
        </t>

        <t>Each key is identified by a 32-bit number called Key ID.
        Zero Key ID has a special meaning - it always contains keying material
        from which the group SA keys are taken.
        </t>

        <t>All keys in G-IKEv2 are transmitted in encrypted form, which format is 
        defined in <xref target="wrapped_key" />. This format specifies a Key ID
        (ID of a key that is encrypted in this attribute) and a KWK ID
        (ID of a key that was used to encrypt this attribute). Keys may be 
        encrypted either with default KWK (SK_w) or with other keys,
        which the GM has received in the KEY_WRAP_KEY attributes.
        If a key was encrypted with SK_w, then the KWK ID field is set to zero,
        otherwise the KWK ID field identifies the key used for encryption.
        </t>

        <t>When a GM receives a message from the GCKS installing new data security or rekey SA,
        it will contain a KD payload with a SA_KEY attribute containing keying material for this SA.
        For a data security SA exactly one SA_KEY attribute will be present
        with both Key ID and KWK ID fields set to zero. This means that the 
        default KWK (SK_w) should be used to extract this keying material.
        </t>

        <t>For a multicast rekey SA multiple SA_KEY attributes may be present 
        depending on the key management policy employed by the GCKS. If multiple SA_KEY attributes 
        are present then all of them MUST contain the same keying material encrypted using different keys.
        The GM in general is unaware of the GCKS's key management policy and can always use the same procedure to get 
        the keys. In particular, the GM's task is to find a way to decrypt at least one of the SA_KEY attributes
        using either the SK_w or the keys from the KEY_WRAP_KEY attributes that are present in the same message  
        or were receives in previous messages.
        </t>

        <t>We will use the term "Key Path" to describe an ordered sequence of keys 
        where each subsequent key was used to encrypt the previous one.
        The GM keeps its own Key Path (called working Key Path) in the memory associated
        with each group it is registered to and update it when needed.
        When the GSA_REKEY message is received the GM processes the received SA_KEY attributes 
        one by one trying to construct a new key path that starts from this attributes and 
        ends with any key in the working Key Path or with the default KWK (SK_w). 
        </t>

        <t>In the simplest case the SA_KEY attribute is encrypted
        with SK_w so that the new Key Path is empty. 
        If more complex key management policies are used then the Key Path will
        contain intermediate keys, which will be from the KEY_WRAP_KEY attributes
        received in the same messages. If the GM is able to construct a new Key Path,
        then it is able to decrypt the SA_KEY attribute and use its content to form the SA keys.
        If it is unable to build a new Key Path, then in means that the GM is excluded
        from the group.
        </t>

        <t>Depending on the new Key Path the GM should do the following actions to be prepared for future key updates:
        <list style="symbols">
          <t>If the new Key Path is empty then no actions are needed. This may happen 
          if no KEY_WRAP_KEY attributes from the received message were used.
          </t>
          <t>If the new Key Path is non-empty and it ends up with the default KWK (SK_w), then the whole new 
          Key Path is stored by the GM as the GM's working Key Path.
          This situation may only happen at the time the GM is registering to the group,
          when the GCKS is providing it with its personal key and the other keys from the key tree that are needed for this GM.
          These keys form an initial working Key Path.
          </t>
          <t>In all other cases the new Key Path will end up where some key from the GM's working Key Path was used. 
          In this case the new Key Path replaces the part of the GM's working Key Path from the beginning and up to (but not including) 
          the key that the GM has used to decrypt the last key in the new Key Path.
          </t>
        </list>
        <xref target="lkh_key_management" /> contains an example of how this algorithm works in case of LKH
        key management policy.
        </t>
      </section>

      <section anchor="group_sa_keys" title="Group SA Keys">
        <t>Group SA keys are downloaded to GMs in the form of keying material. The keys are taken
        from this keying material as if they were concatenated to form it.
        </t>

        <t>For a data security SA the keys are taken in accordance to the third bullet from Section 2.17 of 
        <xref target="RFC7296" />. In particular, for the ESP and AH SAs the encryption key (if any) MUST be
        taken from the first bits of the keying material and the integrity key (if any) MUST be
        taken from the remaining bits.
        </t>

        <t>For a group rekey SA the following keys are taken from the keying material:

        <figure >
          <artwork><![CDATA[
SK_e | SK_a | SK_w = KEYMAT
          ]]></artwork>
        </figure>

        where SK_e and SK_a are the keys used for the Encryption Algorithm and the Integrity Algorithm transforms
        for the corresponding SA and SK_w is a default KWK for this SA. Note, that SK_w is also used with 
        the Encryption Algorithm transform as well as SK_e. Note also, that if AEAD
        algorithm is used for encryption, then SK_a key will not be used (GM can use
        the formula above assuming the length of SK_a is zero).
        </t>
      </section>
    </section>

    <section anchor="header_payload" title="Header and Payload Formats">
      <t>The G-IKEv2 is an IKEv2 extension and thus inherits its wire format 
      for data structures. However, the processing of some payloads are
      different and several new payloads are defined:
      Group Identification (IDg), Group Security Association (GSA) Key Download (KD).
      New exchange types GSA_AUTH, GSA_REGISTRATION, GSA_REKEY and GSA_INBAND_REKEY are
      also added.
      </t>

      <t>This section describes new payloads and the differences in processing 
      of existing IKEv2 payloads.
      </t>

      <section anchor="header" title="G-IKEv2 Header">
        <t>G-IKEv2 uses the same IKE header format as specified in <xref target="RFC7296" />
        section 3.1. Major Version is 2 and Minor Version is 0 as in IKEv2. 
        IKE SA Initiator's SPI, IKE SA Responder's SPI, Flags, Message ID, and Length are 
        as specified in <xref target="RFC7296"></xref>.
        </t>
      </section>

      <section title="Group Identification Payload">
        <t>The Group Identification (IDg) payload allows the group member to indicate which group it
        wants to join. The payload is constructed by using the IKEv2
        Identification Payload (section 3.5 of <xref target="RFC7296"></xref>). 
        ID type ID_KEY_ID MUST be supported. ID types ID_IPV4_ADDR, ID_FQDN, ID_RFC822_ADDR, 
        ID_IPV6_ADDR SHOULD be supported. ID types ID_DER_ASN1_DN and ID_DER_ASN1_GN 
        are not expected to be used. The Payload Type for the Group Identification payload is fifty (50).
        </t>
      </section>

      <section title="Security Association - GM Supported Transforms Payload">
        <t>The Security Association - GM Supported Transforms Payload (SAg) 
        payload declares which Transforms a GM is willing to
        accept. The payload is constructed using the format of the IKEv2
        Security Association payload (section 3.3 of <xref target="RFC7296"></xref>). 
        The Payload Type for SAg is identical to the SA Payload Type - thirty-three (33).
        </t>
      </section>

      <section anchor="gsa_payload" title="Group Security Association Payload">
        <t>The Group Security Association (GSA) payload is used by the GCKS to
        assert security attributes for both Rekey and Data-security SAs.
        The Payload Type for the Group Security Association payload is fifty-one (51).
        </t>
    
        <figure title="GSA Payload Format" anchor="gsa_payload_format">
          <preamble></preamble>
          <artwork><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Next Payload  |C|   RESERVED  |         Payload Length        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                       <Group Policies>                        ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

            ]]></artwork>
            <postamble></postamble>
        </figure>
    
        <t>The Security Association Payload fields are defined as follows:
          <list style="symbols">
            <t>Next Payload, C, RESERVED, Payload Length fields comprise the IKEv2 Generic Payload Header and
            are defined in Section 3.2. of <xref target="RFC7296"></xref>.</t>

            <t>Group Policies (variable) - A set of group policies for the group.</t>
          </list>
        </t>
    
        <section anchor="group_policy" title="Group Policies">
          <t>Croup policies are comprised of two types of policy - Group SA (GSA) policy
          and Group Associated (GA) policy. GSA policy defines parameters 
          for the Security Association for the group. Depending on the 
          employed security protocol GSA policies may further be classified as
          rekeying SA policy (GSA KEK) and data traffic SA policy (GSA TEK).
          GSA payload may contain zero or one GSA KEK policy, zero or more GSA TEK policies, 
          and zero or one GA policy, where either one GSA KEK or GSA TEK policy MUST be present.</t>

          <t>This latitude allows various group policies to be accommodated.
          For example if the group policy does not require the use of a Rekey
          SA, the GCKS would not need to send a GSA KEK policy to the group
          member since all SA updates would be performed using the
          Registration SA. Alternatively, group policy might use a Rekey SA
          but choose to download a KEK to the group member only as part of the
          Registration SA. Therefore, the GSA KEK policy would not be
          necessary as part of the GSA_REKEY message.</t>

          <t>Specifying multiple GSA TEKs allows multiple related data streams
          (e.g., video, audio, and text) to be associated with a session, but
          each protected with an individual security association policy.</t>

          <t>A GAP allows for the distribution of group-wise policy,
          such as instructions for when to activate and de-activate SAs.</t>

          <t>Policies are distributed in substructures to the GSA payload.
          The format of the substructures is defined below in <xref target="gsa_policy" />
          (for GSA policy) and in <xref target="ga_policy" /> (for GA policy).
          The first octet of the substructure unambiguously determines its type - 
          it is zero for GAP and non-zero (actually, it is the security protocol ID)
          for GSA policies.
          </t>
        </section>

        <section title="Group Security Association Policy Substructure" anchor="gsa_policy">
          <t>The GSA policy substructure contains parameters for the SA
          used with this group. Depending on the security protocol 
          the SA is either a rekey SA or a data security SA (ESP and AH).
          It is NOT RECOMMENDED that the GCKS distribute both ESP and AH
          policies for the same set of Traffic Selectors.
          </t>

          <t><figure title="GSA Policy Substructure Format" anchor="gsa_format">
            <preamble></preamble>
            <artwork><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Protocol   |   SPI Size    |            Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                              SPI                              ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                  Source Traffic Selector                      ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                Destination Traffic Selector                   ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  
|                                                               |
~                       <GSA Transforms>                        ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                       <GSA Attributes>                        ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]></artwork>
            <postamble></postamble>
          </figure></t>

          <t>The GSA policy fields are defined as follows:
        
          <list style="symbols">
            <t>Protocol (1 octet) - Identifies the security protocol for this group SA.
            The values are defined in the IKEv2 Security Protocol Identifiers in 
            <xref target="IKEV2-IANA" />. The valid values for this field are:
            &lt;TBA&gt; (GIKE_REKEY) for GSA KEK policy and 2 (AH) or 3 (ESP) for GSA TEK policy.
            </t>

            <t>SPI Size (1 octet) - Size of Security Parameter Index (SPI) for the group SA.
            SPI size depends on the SA protocol. For GIKE_REKEY it is 16 octets, while for AH and ESP it is 4 octets.
            </t>

            <t>Length (2 octets, unsigned integer) - Length of this substructure including the header.
            </t>

            <t>SPI (variable) - Security Parameter Index for the group SA.
            The size of this field is determined by the SPI Size field.
            As described above, these SPIs are assigned by the GCKS. 
            In case of GIKE_REKEY the SPI must be the IKEv2 Header SPI pair where the
            first 8 octets become the "Initiator&rsquo;s SPI" field in the
            G-IKEv2 rekey message IKEv2 HDR, and the second 8 octets become
            the "Responder&rsquo;s SPI" in the same HDR. When selecting SPI the GCKS
            MUST make sure that the sole first 8 octets (corresponding to "Initiator&rsquo;s SPI" 
            field in the IKEv2 header) uniquely identify the Rekey SA.
            </t>

            <t>Source &amp; Destination Traffic Selectors &ndash; (variable) - 
            Substructures describing the source and destination of the
            network identities. The format for these substructures 
            is defined in IKEv2 <xref target="RFC7296"></xref>, section 3.13.1. 
            <!-- <xref target="trsel" />. --> 
            For the group rekey SA (protocol GIKE_REKEY) the
            destination traffic selectors MUST define a single IP address, IP protocol and port the GSA_REKEY
            messages will be destined to. The source traffic selector in this case MUST either define
            a single IP address, IP protocol and port the GSA_REKEY messages will be originated from
            or be a wildcard selector. For the data security (AH and ESP) SAs the traffic selectors instead specify
            characteristics of the traffic to be protected by the corresponding SA. 
            </t>

            <t>GSA Transforms (variable) - A list of Transform
            Substructures specifies the policy information for the group SA. 
            The format is defined in IKEv2 <xref target="RFC7296"></xref>, section 3.3.2.
            The Last Substruc value in each Transform Substructure
            will be set to 3 except for the last one in the list, which is
            set to 0. <xref target="gsa_transforms" /> describes using IKEv2 transforms
            in GSA policy substructure.
            </t>

            <t>GSA Attributes (variable) - Contains policy attributes associated
            with the group SA. The following sections describe the possible
            attributes. Any or all attributes may be optional, depending on
            the group SA protocol and the group policy. <xref target="gsa_attr" />
            defines attributes used in GSA policy.</t>
          </list></t>

<!--
          <section anchor="trsel" title="GSA Traffic Selector Substructure">

            <t><figure title="Traffic Selector Substructure" anchor="trsel_format">
              <preamble></preamble>
              <artwork><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Number of TSs |                                               |
+-+-+-+-+-+-+-+-+                                               |
|                                                               |
~                       <Traffic Selectors>                     ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              ]]></artwork>
              <postamble></postamble>
            </figure></t>

            <t>The Traffic Selector Substructure fields are defined as follows:

            <list style="symbols">
              <t>Number of TSs (1 octet) - Number of Traffic Selectors being provided.
              If this field is zero (so called "empty selector") then no traffic selectors follow meaning "any traffic".
              </t>
              <t> Traffic Selectors (variable length) - Zero or more individual
              Traffic Selectors. The format of these Traffic Selectors 
              is defined in IKEv2 <xref target="RFC7296"></xref>, section 3.13.1.
              </t>
            </list>
            </t>
          </section>
-->

          <section anchor="gsa_transforms" title="GSA Transforms">
            <t>GSA policy is defined by means of transforms in GSA policy substructure.
            For this purpose the transforms defined in <xref target="RFC7296" />
            are used. In addition, new transform types are defined for using in G-IKEv2:
            Authentication Method (AUTH)<!-- XXXX , Encapsulation Mode (MODE) --> 
            and Group Key Management Method (GKM), see <xref target="IANA" />.
            </t>

            <t> Valid Transform Types depend on group SA protocol and are summarized in the table below.

            <figure align="center" anchor="allowed_transforms" title="Valid Transform Types">
              <artwork align="left"><![CDATA[
Protocol    Mandatory Types                 Optional Types
----------------------------------------------------------
GIKE_REKEY  ENCR, INTEG*, PRF, AUTH, GKM
ESP         ENCR]]> <!-- XXXX <![CDATA[, MODE]]> --><![CDATA[                           INTEG, ESN
AH          INTEG]]><!-- XXXX <![CDATA[, MODE]]> --><![CDATA[                           ESN
              ]]></artwork>
            </figure>

            (*) If AEAD encryption algorithm is used, then INTEG transform
            MUST NOT be specified, otherwise it MUST be specified.
            </t>

            <section anchor="auth_method" title="Authentication Method Transform">
              <t>The Authentication Method (AUTH) transform is used in the GIKE_REKEY
              policy to convey information of how GCKS will authenticate the GSA_REKEY messages.
              This values are from the IKEv2 Authentication Method registry <xref target="IKEV2-IANA"></xref>.
              Note, that this registry defines only 256 possible values, so even that Transform ID field
              in the Transform substructure allows for 65536 possible values, in case of 
              the Authentication Method transform the values 257-65535 MUST NOT be used.
              </t>

              <t>Among the currently defined authentication methods in the IKEv2 Authentication Method registry,
              only the following are allowed to be used in the Authentication Method transform: Shared Key Message Integrity Code,
              NULL Authentication and  Digital Signature. Other currently defined authentication methods MUST NOT be used.
              The following semantics is associated with each of the allowed methods.
              <list style="hanging">
                <t>Shared Key Message Integrity Code - GCKS will authenticates the GSA_REKEY 
                messages by means of shared secret. In this case the GCKS MUST include the AUTH_KEY attribute
                containing the shared key into the KD payload at the time the GM is registered to the group.
                </t>
                <t>NULL Authentication - No additional authentication of the GSA_REKEY messages 
                will be provided by the GCKS (besides the ability for the GMs to correctly decrypt them and verify their ICV).
                In this case the GCKS MUST NOT include the AUTH_KEY attribute into the KD payload.
                </t>
                <t>Digital Signature - Digital signatures will be used by the GCKS to authenticate the GSA_REKEY messages.
                In this case the GCKS MUST include the AUTH_KEY attribute containing the public key 
                into the KD payload at the time the GM is registered to the group. To specify the details of the 
                signature algorithm a new attribute Algorithm Identifier (&lt;TBA by IANA&gt;) is defined.
                This attribute contains DER-encoded ASN.1 object AlgorithmIdentifier, which would specify the 
                signature algorithm and the hash function that the GCKS will use for authentication.
                The AlgorithmIdentifier object is defined in section 4.1.1.2 of <xref target="RFC5280" />,
                see also <xref target="RFC7427" /> for the list of common AlgorithmIdentifier values used in IKEv2.
                In case of using digital signature the GCKS MUST include the Algorithm Identifier attribute
                in the Authentication Method transform.
                </t>
              </list>
              The type of the Authentication Method Transform is &lt;TBA by IANA&gt;.
              </t>
            </section>

            <section anchor="gkm_alg" title="Group Key Management Method Transform">
              <t>The Group Key Management Method (GKM) transform is used in the GIKE_REKEY
              policy to convey information of how GCKS will manage the group keys to provide 
              forward and backward access control (i.e., used to exclude group members). 
              Possible key management methods are defined in a new IKEv2 registry 
              "Transform Type &lt;TBA&gt; - Group Key Management Methods"
              (see <xref target="IANA" />). This document defines one values for this registry:
              <list style="hanging">
                <t>Wrapped Key Download (&lt;TBA by IANA&gt;) - Keys are downloaded by GCKS to the GMs
                in encrypted form. This algorithm may provide forward and backward access control
                if some form of key hierarchy is used and each GM is provided with a personal 
                key at the time of registration. Otherwise no access control is provided.
                </t>
              </list>
              The type of the Group Key Management Method transform is &lt;TBA by IANA&gt;.
              </t>
            </section>

            <!-- XXXX
            <section anchor="mode" title="Encapsulation Mode Transform">
              <t>The Encapsulation Mode (MODE) transform is used in the data security policy
              to convey information about the mode the SA is to be created in.
              Possible modes are defined in a new IKEv2 registry 
              "Transform Type &lt;TBA&gt; - Encapsulation Mode"
              (see <xref target="IANA" />). This document defines two values for this registry:
              <list style="hanging">
                <t>Tunnel (&lt;TBA by IANA&gt;) - Data security SA is created in tunnel mode.
                </t>
                <t>Transport (&lt;TBA by IANA&gt;) - Data security SA is created in transport mode.
                </t>
              </list>
              The type of the Encapsulation Mode transform is &lt;TBA by IANA&gt;.
              </t>
            </section>
XXXX -->

            <section anchor="esn" title="Extended Sequence Number Transform">
              <t>Extended Sequence Number (ESN) Transform is defined in <xref target="RFC7296" /> 
              to allow using 64-bit sequence numbers in ESP and AH. Since both AH <xref target="RFC4302" />
              and ESP <xref target="RFC4303" /> are defined so, that high-order 32 bits of extended sequence
              numbers are never transferred on the wire, it makes using ESN in multicast data security SAs
              problematic, because GMs that join group long after it is created will have to somehow learn the current high order 32 bits
              of ESN for each sender in the group. The algorithm for doing this described in <xref target="RFC4302" />
              and <xref target="RFC4303" /> is resource-consuming. For this reason
              extended sequence numbers SHOULD NOT <!-- MUST NOT? --> be used for multicast data security SAs
              and thus the ESN Transform SHOULD NOT <!-- MUST NOT? --> be included in the GSA Payload.
              </t>
            </section>
          </section>

          <section anchor="gsa_attr" title="GSA Attributes">
            <t>GSA attributes are generally used to provide GMs with additional parameters
            for the GSA policy. Unlike security parameters distributed via transforms,
            which are expected not to change over time (unless policy changes), 
            the parameters distributed via GSA attributes
            may depend on the time the provision takes place, on the
            existence of others group SAs or on other conditions.
            </t>

            <t>This document creates a new IKEv2 IANA registry for the types
            of the GSA attributes which is initially filled as described in <xref target="IANA" />.
            In particular, the following attributes are initially added.

            <figure>
              <artwork align="center"><![CDATA[
GSA Attributes          Value  Type   Multiple  Used In
---------------------------------------------------------------------
Reserved                0
GSA_KEY_LIFETIME        1      V      N         (GIKE_REKEY, AH, ESP)
GSA_INITIAL_MESSAGE_ID  2      V      N         (GIKE_REKEY)
GSA_NEXT_SPI            3      V      Y         (GIKE_REKEY, AH, ESP)
              ]]></artwork>
            </figure>

            The attributes must follow the format defined in the IKEv2 <xref
            target="RFC7296"></xref> section 3.3.5. In the table, attributes
            that are defined as TV are marked as Basic (B); attributes that
            are defined as TLV are marked as Variable (V).
            </t>

            <section anchor="gsa_attr_key_lifetime" title="GSA_KEY_LIFETIME Attribute">
              <t>The GSA_KEY_LIFETIME attribute specifies the maximum time for
              which the group SA is valid. The value is a 4 octet number defining a valid time period in seconds.
              A single attribute of this type MUST be included into any GSA policy substructure.
              </t>

              <t>When the lifetime expires, the group security association and all associated keys MUST be deleted. 
              The GCKS may delete the SA at any time before the end of the valid period. 
              </t>
            </section>

            <section anchor="gsa_attr_initial_message_id" title="GSA_INITIAL_MESSAGE_ID Attribute">
              <t>The GSA_INITIAL_MESSAGE_ID attribute defines the initial Message ID
              to be used by the GCKS in the GSA_REKEY messages. The Message ID
              is a 4 octet unsigned integer in network byte order. 
              </t>

              <t>A single attribute of this type MUST be included into 
              the GSA KEK policy substructure if the initial Message ID is non-zero.
              Note, that it is always the case if GMs join the group after some multicast rekey operations
              have already taken place, so in these cases this attribute will be included into
              the GSA policy at the time of GMs' registration.
              </t>
            </section>

            <section anchor="gsa_attr_next_spi" title="GSA_NEXT_SPI Attribute">
              <t>The optional GSA_NEXT_SPI attribute contains SPI that the GCKS reserved  
              for the next group SA replacing this group SA. The length of the attribute data
              is determined by the SPI Size field in the GSA Policy substructure the attribute
              resides in (see <xref target="gsa_policy" />), and the attribute data contains 
              SPI as it would appear on the network. Multiple attributes of this type MAY be included,
              meaning that any of the supplied SPIs can be used in the replacement group SA.
              </t>

              <t> The GM may store these values and if later the GM starts receiving 
              group SA messages with one of these SPIs without seeing a rekey message over the current rekey SA,
              this may be used as an indication, that the rekey message got lost on its way to this GM.
              In this case the GM SHOULD re-register to the group.
              </t>

              <t> Note, that this method of detecting lost rekey messages can only be used 
              by passive GMs, i.e. those, that only listen and don't send data.
              There is also no point to include this attribute in the GSA_INBAND_REKEY messages,
              since they use reliable transport. Note also, that the GCKS is free 
              to forget its promises and not to use the SPIs it sent in the GSA_NEXT_SPI 
              attributes before (e.g. in case of the GCKS reboot), so the GM must only treat
              these information as a "best effort" made by GCKS to prepare for future rekeys.
              </t>
            </section>
          </section>
        </section>

        <section title="Group Associated Policy Substructure"  anchor="ga_policy">
          <t>Group specific policy that does not belong to any SA policy can be distributed to
          all group member using Group Associated Policy (GAP) substructure.</t>

          <t>The GAP substructure is defined as follows:</t>

          <figure title="GAP Substructure Format" anchor="gap_format">
            <preamble></preamble>
              <artwork><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ZERO               |            Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                        <GAP Attributes>                       ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              ]]></artwork>
            <postamble></postamble>
          </figure>

          <t>The GAP substructure fields are defined as follows:</t>

          <t><list style="symbols">
            <t>ZERO (2 octets) - MUST be zero.</t>

            <t>Length (2 octets, unsigned integer) - Length of this substructure including the header.
            </t>

            <t>GAP Attributes (variable) - Contains policy attributes associated
            with no specific SA. The following sections describe the possible
            attributes. Any or all attributes may be optional, depending on
            the group policy.</t>
          </list></t>

          <t>This document creates a new IKEv2 IANA registry for the types
          of the GAP attributes which is initially filled as described in <xref target="IANA" />.
          In particular, the following attributes are initially added.

          <figure>
            <artwork align="center"><![CDATA[
GAP Attributes              Value   Type    Multiple
----------------------------------------------------
Reserved                    0
GAP_ATD                     1       B       N
GAP_DTD                     2       B       N
GAP_SID_BITS                3       B       N
            ]]></artwork>
          </figure>

          The attributes must follow the format defined in the IKEv2 <xref
          target="RFC7296"></xref> section 3.3.5. In the table, attributes
          that are defined as TV are marked as Basic (B); attributes that
          are defined as TLV are marked as Variable (V).
          </t>

          <section anchor="gap_attr_atd_dtd" title="GAP_ATD And GAP_DTD Attributes">
            <t>Section 4.2.1 of <xref target="RFC5374" /> specifies a key rollover method that
            requires two values be provided to group members - Activation Time Delay (ATD) and
            Deactivation Time Delay (DTD).
            </t>

            <t>The GAP_ATD attribute allows a GCKS to set the
            Activation Time Delay for data security SAs of the group. The ATD
            defines how long active members of the group (those who sends traffic) 
            should wait after receiving new SAs before staring sending traffic over them.
            Note, that to achieve smooth rollover passive members of the group should
            activate the SAs immediately once they receive them.
            </t>

            <t>The GAP_DTD attribute allows the GCKS to set the
            Deactivation Time Delay for previously distributed SAs. The
            DTD defines how long after receiving a request to delete data security SAs
            passive group members should wait before actually deleting them.
            Note that active members of the group should stop sending traffic over these old SAs
            once new replacement SAs are activated (after time specified in the GAP_ATD attribute).
            </t>

            <t>The GAP_ATD and GAP_DTD attributes contain 16 bit unsigned integer in a 
            network byte order, specifying the delay in seconds. These attributes are OPTIONAL. 
            If one of them or both are not sent by the GCKS, the GMs should use default values 
            for activation and deactivation time delays. <!-- TODO which? -->
            </t>
          </section>

          <section anchor="gap_attr_sid_bits" title="GAP_SID_BITS Attribute">
            <t>The GAP_SID_BITS attribute declares how many bits of the
            cipher nonce are taken to represent an SID value. The bits are
            applied as the most significant bits of the IV, as shown in Figure
            1 of <xref target="RFC6054"></xref> and specified in <xref
            target="sid-usage"></xref>. Guidance for a GCKS choosing the
            NUMBER_OF_SID_BITS is provided in Section 3 of <xref
            target="RFC6054"></xref>. This value is applied to each SID value 
            distributed in the KD payload.</t>

            <t>The GCKS MUST include this attribute if there are more than one sender
            in the group and any of the data security SAs use counter-based 
            cipher mode. The number of SID bits is represented as 16 bit unsigned integer in 
            network byte order.
            </t>
          </section>
        </section>
      </section>

      <section anchor="KD" title="Key Download Payload">
        <t>The Key Download (KD) payload contains the group keys for the group
        specified in the GSA Payload.
        The Payload Type for the Key Download payload is fifty-two (52).
        </t>

        <figure title="Key Download Payload Format" anchor="kd_payload_format">
          <preamble></preamble>
          <artwork><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Next Payload  |C|  RESERVED   |            Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                         <Key Packets>                         ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          ]]></artwork>
          <postamble></postamble>
        </figure>

        <t>The Key Download payload fields are defined as follows:</t>

        <t><list style="symbols">
         <t>Next Payload, C, RESERVED, Payload Length fields comprise the IKEv2 Generic Payload Header and
         are defined in Section 3.2. of <xref target="RFC7296"></xref>.</t>

          <t>Key Packets (variable) - Contains Group Key Packet and Member Key Packet substructures. Each Key Packet contains 
          keys for a single group rekey or data security SA or a keys and security parameters for a GM.
          </t>
        </list>

        Two types of Key Packets are used - Group Key Packet and Member Key Packet. 
        </t>

        <section anchor="wrapped_key" title="Wrapped Key Format">
          <t>The symmetric keys in G-IKEv2 are never sent in clear.
          They are always encrypted with other keys using the 
          format called Wrapped Key that is shown below (<xref target="key_format" />).
          </t>

          <t>The keys are encrypted using algorithm that is used to 
          encrypt the message the keys are sent in. It means, that in case of unicast
          IKE SA (used for GMs registration and rekeying using GSA_INBAND_REKEY)
          the encryption algorithm will be the one negotiated during the 
          SA establishment, while for the GSA_REKEY messages the algorithm will be provided
          by the GCKS in the Encryption Algorithm transform in the GSA payload
          when this multicast SA was being established (not in the same GSA_REKEY message).
          </t>

          <t>If AEAD mode is used for encryption, then for the purpose
          of key encryption the authentication tag MUST NOT be used
          (both not calculated and not verified), since the G-IKEv2 provides
          authentication of all its messages. In addition there is no AAD in this case.
          If encryption algorithm requires padding, then the encrypted
          key MUST be padded before encryption to have the required size.
          If the encryption algorithm doesn't define the padding content,
          then the following scheme SHOULD be used: the Padding bytes 
          are initialized with a series of (unsigned, 1-byte) integer values.
          The first padding byte appended to the plaintext is numbered 1, 
          with subsequent padding bytes making up a monotonically 
          increasing sequence: 1, 2, 3, ....  The length of the padding
          is not transmitted and is implicitly determined, since the length
          of the key is known.
          </t>

          <figure title="Wrapped Key Format" anchor="key_format">
            <preamble></preamble>
            <artwork align="center"><![CDATA[
                       1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              Key ID                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              KWK ID                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                               IV                              ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                          Encrypted Key                        ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              ]]></artwork>
            <postamble></postamble>
          </figure>

          <t>The Wrapped Key fields are defined as follows:</t>

          <t><list style="symbols">
             <t>Key ID (4 octets) - ID of the encrypted key. The value zero means that the encrypted key
             contains keying material for the group SA, otherwise it contains some intermediate key.</t>
             <t>Key Wrap Key (KWK) ID (4 octets) - ID of the key that was used to encrypt this key.
             The value zero means that the default KWK was used to encrypt the key, otherwise some other 
             key was used.</t>
             <t>IV (variable) - Initialization Vector used for encryption. The size and the content of IV is defined
             by the encryption algorithm employed.</t>
             <t>Encrypted Key (variable) - The encrypted key bits. These bits may comprise either a single
             encrypted key or a result of encryption of a concatenation of keys (key material) for several algorithms.</t>
            </list>
          </t>
        </section>

        <section anchor="group_key_packet" title="Group Key Packet Substructure">
          <t>Group Key Packet substructure contains SA key information. This key information is associated 
          with some group SAs: either with data security SAs or with group rekey SA.
          </t>

          <figure title="Group Key Packet Substructure Format" anchor="group_key_packet_format">
            <preamble></preamble>
            <artwork align="center"><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Protocol   |   SPI Size    |            Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                              SPI                              ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~               <Group Key Download Attributes>                 ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              ]]></artwork>
            <postamble></postamble>
          </figure>

          <t><list style="symbols">
            <t>Protocol (1 octet) - Identifies the security protocol for this key packet.
            The values are defined in the IKEv2 Security Protocol Identifiers in 
            <xref target="IKEV2-IANA" />. The valid values for this field are:
            &lt;TBA&gt; (GIKE_REKEY) for KEK Key packet and 2 (AH) or 3 (ESP) for TEK key packet.
            </t>

            <t>SPI Size (1 octet) - Size of Security Parameter Index (SPI) for the corresponding SA.
            SPI size depends on the security protocol. For GIKE_REKEY it is 16 octets, while for AH and ESP it is 4 octets.
            </t>

            <t>Length (2 octets, unsigned integer) - Length of this substructure including the header.
            </t>

            <t>SPI (variable) - Security Parameter Index for the corresponding SA.
            The size of this field is determined by the SPI Size field.
            In case of GIKE_REKEY the SPI must be the IKEv2 Header SPI pair where the
            first 8 octets become the "Initiator&rsquo;s SPI" field in the
            G-IKEv2 rekey message IKEv2 HDR, and the second 8 octets become
            the "Responder&rsquo;s SPI" in the same HDR. When selecting SPI the GCKS
            MUST make sure that the sole first 8 octets (corresponding to "Initiator&rsquo;s SPI" 
            field in the IKEv2 header) uniquely identify the Rekey SA.
            </t>

            <t>Group Key Download Attributes (variable length) - Contains Key
            information for the corresponding SA.
            </t>
          </list>
          </t>

          <t>This document creates a new IKEv2 IANA registry for the types
          of the Group Key Download attributes which is initially filled as described in <xref target="IANA" />.
          In particular, the following attributes are initially added.

          <figure>
            <artwork align="center"><![CDATA[
GKD Attributes      Value   Type    Multiple    Used In
------------------------------------------------------------
Reserved            0
SA_KEY              1       V       Y           (GIKE_REKEY)
                                    N           (AH, ESP)
          ]]></artwork>
          </figure>

          The attributes must follow the format defined in the IKEv2 <xref
          target="RFC7296"></xref> section 3.3.5. In the table, attributes
          that are defined as TV are marked as Basic (B); attributes that
          are defined as TLV are marked as Variable (V).
          </t>

          <section anchor="gkd_attr_group_key" title="SA_KEY Attribute">
            <t>The SA_KEY attribute contains a keying material
            for the corresponding SA. The content of the attribute is formatted according to 
            <xref target="wrapped_key" /> with a precondition that the Key ID field MUST be zero.
            The size of the keying material MUST be equal to the total size of the keys needed to be taken
            from this keying material (see <xref target="group_sa_keys" />) for the corresponding SA.
            </t>

            <t>If the Key Packet is for a data security SA (AH or ESP protocols), 
            then exactly one SA_KEY attribute MUST be present with both
            Key ID and KWK ID fields set to zero.
            </t>

            <t>If the Key Packet is for a rekey SA (GIKE_REKEY protocol), 
            then at least one SA_KEY attribute with zero Key ID MUST be present.
            Depending on GCKS key management policy more 
            SA_KEY attributes MAY be present.
            </t>
          </section>
        </section>

        <section anchor="member_key_packet" title="Member Key Packet Substructure" >
          <t>The Member Key Packet substructure contains keys and other
          parameters that are specific for the member of the group and are not
          associated with any particular group SA.
          </t>

          <figure title="Member Key Packet Substructure Format" anchor="mkd_key_packet">
            <preamble></preamble>
            <artwork><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             ZERO              |            Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                 <Member Key Download Attributes>              ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             ]]></artwork>
            <postamble></postamble>
          </figure>

          <t>The Member Key Packet substructure fields are defined as follows:</t>

          <t><list style="symbols">
            <t>ZERO (2 octets) - MUST be zero.</t>

            <t>Length (2 octets, unsigned integer) - Length of this substructure including the header.
            </t>

            <t>Member Key Download Attributes (variable length) - Contains Key
            information and other parameters exclusively for a particular member of the group.
            </t>
          </list>

          Member Key Packet substructure contains sensitive information for a single GM, for this reason
          it MUST NOT be sent in GSA_REKEY messages and MUST only be sent via unicast
          SA at the time the GM registers to the group (in either GSA_AUTH or GSA_REGISTRATION exchanges).
          </t>

          <t>This document creates a new IKEv2 IANA registry for the types
          of the Member Key Download attributes which is initially filled as described in <xref target="IANA" />.
          In particular, the following attributes are initially added.

          <figure>
            <artwork align="center"><![CDATA[
MKD Attributes          Value   Type    Multiple
------------------------------------------------
Reserved                0
KEY_WRAP_KEY            1       V       Y
GM_SID                  2       V       Y
AUTH_KEY                3       V       N
            ]]></artwork>
          </figure>

          The attributes must follow the format defined in the IKEv2 <xref
          target="RFC7296"></xref> section 3.3.5. In the table, attributes
          that are defined as TV are marked as Basic (B); attributes that
          are defined as TLV are marked as Variable (V).
          </t>

          <section anchor="mkd_attr_kwk" title="KEY_WRAP_KEY Attribute">
            <t>The KEY_WRAP_KEY attribute contains a key that is used 
            to encrypt other keys. One or more the these
            attributes are sent to GMs if the GCKS key management policy
            relies on some key hierarchy (e.g. LKH).
            </t>

            <t>The content of the attribute has a format defined in <xref target="wrapped_key" />
            with a precondition that the Key ID field MUST NOT be zero. 
            The algorithm associated with the key
            is from the Encryption Transform for the SA the KEY_WRAP_KEY
            attributes was sent in. The size of the key MUST be equal to the 
            key size for this algorithm.
            </t>

            <t>Multiple instances of the KEY_WRAP_KEY attributes MAY be present in the key packet.
            </t>
          </section>

          <section anchor="mkd_attr_gm_sid" title="GM_SID Attribute">
            <t>The GM_SID attribute is used to download one or more Sender-ID (SID)
            values for the exclusive use of a group member. One or more of this attributes MUST be
            sent by the GCKS if the GM informed the GCKS that it would be a sender (by inclusion
            the SENDER notification to the request) and at least one of the data security SAs 
            included in the GSA payload uses counter-based mode of encryption. 
            </t>

            <t>If the GMs has requested multiple SID values in the SENDER notification, then the GCKS SHOULD
            provide it with the requested number of SIDs by sending multiple instances of the GM_SID
            attribute. The GCKS MAY send fewer SIDs than requested by the GM (e.g. if it is running out of SIDs),
            but it MUST NOT send more than requested.
            </t>
          </section>

          <section anchor="mkd_attr_auth_key" title="AUTH_KEY Attribute">
            <t>The AUTH_KEY attribute contains the key that is used to authenticate 
            the GSA_REKEY messages. The content of the attribute depends on the authentication
            method the GCKS specified in the Authentication Method transform
            in the GSA payload.
            <list style="symbols">
              <t>If a shared secret is used for the GSA_REKEY messages authentication 
              then the content of the AUTH_KEY attribute is the shared
              secret that MUST be represented in the form of Wrapped Key (see <xref target="wrapped_key" />) 
              with zero KWK ID. The Key ID in this case is arbitrary and MUST be ignored by the GM.
              </t>
              <t>If digital signatures are used for the GSA_REKEY messages authentication 
              then the content of the AUTH_KEY attribute is a public key used
              for digital signature authentication. The public key MUST be represented
              as DER-encoded ASN.1 object SubjectPublicKeyInfo, defined in section 
              4.1.2.7 of <xref target="RFC5280" />. The signature
              algorithm that will use this key was specified in the Algorithm Identifier attribute of the 
              Authentication Method transform. The key MUST be compatible with this algorithm.
              An RSA public key format is defined in <xref target="RFC8017" />, Section
              A.1. DSS public key format is defined in <xref target="RFC3279" /> Section 2.3.2.
              For ECDSA Public keys, use format described in <xref target="RFC5480" /> Section 2.
              Other algorithms added to the IKEv2 Authentication Method
              registry are also expected to include a format of the SubjectPublicKeyInfo 
              object included in the algorithm specification.
              </t>
            </list>

            Multiple instances of the AUTH_KEY attributes MUST NOT be sent.
            </t>
          </section>
        </section>

<!--
        <section anchor="lkh_download" title="LKH Download Type">
          <t>The LKH key packet is comprised of attributes representing
          different leaves in the LKH key tree.</t>

          <t>The following attributes are used to pass an LKH KEK array in the
          KD payload. The attributes must follow the format defined in IKEv2
          (Section 3.3.5 of <xref target="RFC7296"></xref>). In the table,
          attributes defined as TV are marked as Basic (B); attributes defined
          as TLV are marked as Variable (V). The terms Reserved, Unassigned,
          and Private Use are to be applied as defined in <xref
          target="RFC8126"></xref>. The registration procedure is Expert
          Review.</t>

          <section anchor="lkh_download_array" title="LKH_DOWNLOAD_ARRAY">
            <t>The LKH_DOWNLOAD_ARRAY attribute type is used to download a set of LKH
            keys to a group member. It MUST NOT be included in a IKEv2 rekey
            message KD payload if the IKEv2 rekey is sent to more than one
            group member. If an LKH_DOWNLOAD_ARRAY attribute is included in a
            KD payload, there MUST be only one present.</t>

            <t>This attribute consists of a header block, followed by one or
            more LKH keys.</t>

            <figure title="LKH_DOWNLOAD_ARRAY Format" anchor="lkh_download_format">
                <preamble></preamble>
                <artwork><![CDATA[
                    1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         # of LKH Keys        |             RESERVED           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~                           LKH Keys                            ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                ]]></artwork>
                <postamble></postamble>
              </figure>

            <t>The KEK_LKH attribute fields are defined as follows:</t>

            <t><list style="symbols">
                <t>Number of LKH Keys (2 octets) - This value is the number
                of distinct LKH keys in this sequence.</t>

              </list></t>

            <t>Each LKH Key is defined as follows:</t>

            <figure title="LKH Key Format" anchor="lkh_key_format">
                <preamble></preamble>
                <artwork><![CDATA[
                    1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             LKH ID            |            Encr Alg           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           Key Handle                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~                            Key Data                           ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                ]]></artwork>
                <postamble></postamble>
              </figure>

            <t><list style="symbols">
                <t>LKH ID (2 octets) - This is the position of this key in
                the binary tree structure used by LKH.</t>

                <t>Encr Alg (2 octets) - This is the encryption algorithm for
                which this key data is to be used. This value is specified in
                the ENCR transform in the GSA payload.</t>

                <t>Key Handle (4 octets) - This is a randomly generated value
                to uniquely identify a key within an LKH ID.</t>

                <t>Key Data (variable length) - This is the actual encryption
                key data, which is dependent on the Encr Alg algorithm for its
                format.</t>
              </list>
            The first LKH Key structure in an LKH_DOWNLOAD_ARRAY
            attribute contains the Leaf identifier and key for the group
            member. The rest of the LKH Key structures contain keys along the
            path of the key tree in the order starting from the leaf,
            culminating in the group KEK.</t>
          </section>

          <section title="LKH_UPDATE_ARRAY">
            <t>The LKH_UPDATE_ARRAY attribute type is used to update the LKH keys for a
            group. It is most likely to be included in a G-IKEv2 rekey message
            KD payload to rekey the entire group. This attribute consists of a
            header block, followed by one or more LKH keys, as defined in
            <xref target="lkh_download_array"></xref>.</t>

            <t>There may be any number of LKH_UPDATE_ARRAY attributes included
            in a KD payload.</t>

            <figure title="LKH_UPDATE_ARRAY Format" anchor="lkh_update_format">
                <preamble></preamble>
                <artwork><![CDATA[
                    1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          # of LKH Keys        |             LKH ID            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           Key Handle                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
~                            LKH Keys                           ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                ]]></artwork>
                <postamble></postamble>
              </figure>

            <t><list style="symbols">
                <t>Number of LKH Keys (2 octets) - This value is the number
                of distinct LKH keys in this sequence.</t>

                <t>LKH ID (2 octets) - This is the node identifier associated
                with the key used to encrypt the first LKH Key.</t>

                <t>Key Handle (4 octets) - This is the value that uniquely
                identifies the key within the LKH ID which was used to encrypt
                the first LKH key.</t>
              </list></t>

            <t>The LKH Keys are as defined in <xref
            target="lkh_download_array"></xref>. The LKH Key structures
            contain keys along the path of the key tree in the order from the
            LKH ID found in the LKH_UPDATE_ARRAY header, culminating in the
            group KEK. The Key Data field of each LKH Key is encrypted with
            the LKH key preceding it in the LKH_UPDATE_ARRAY attribute. The
            first LKH Key is encrypted under the key defined by the LKH ID and
            Key Handle found in the LKH_UPDATE_ARRAY header.</t>
          </section>
-->
<!--
        <section anchor="SID_download_type" title="SID Download Type">
          <t>The SID attribute is used to download one or more Sender-ID (SID)
          values for the exclusive use of a group member. The terms Reserved,
          Unassigned, and Private Use are to be applied as defined in <xref
          target="RFC8126"></xref>. The registration procedure is Expert
          Review.</t>

          <t>Because a SID value is intended for a single group member, the
          SID Download type MUST NOT be distributed in a GSA_REKEY message
          distributed to multiple group members.</t>

          <section title="NUMBER_OF_SID_BITS">
            <t>The NUMBER_OF_SID_BITS attribute type declares how many bits of the
            cipher nonce in which to represent an SID value. The bits are
            applied as the most significant bits of the IV, as shown in Figure
            1 of <xref target="RFC6054"></xref> and specified in <xref
            target="sid-usage"></xref>. Guidance for a GCKS choosing the
            NUMBER_OF_SID_BITS is provided in Section 3 of <xref
            target="RFC6054"></xref>.</t>

            <t>This value is applied to each SID value distributed in the SID
            Download.</t>
          </section>

          <section title="SID_VALUE">
            <t>The SID_VALUE attribute type declares a single SID value for the
            exclusive use of this group member. Multiple SID_VALUE attributes
            MAY be included in a SID Download.</t>
          </section>

          <section title="GM Semantics">
            <t>The SID_VALUE attribute value distributed to the group member
            MUST be used by that group member as the SID field portion of the
            IV for all Data-Security SAs including a counter-based mode of
            operation distributed by the GCKS as a part of this group. When
            the Sender-Specific IV (SSIV) field for any Data-Security SA is
            exhausted, the group member MUST NOT act as a sender on that SA
            using its active SID. The group member SHOULD re-register, at
            which time the GCKS will issue a new SID to the group member,
            along with either the same Data-Security SAs or replacement ones.
            The new SID replaces the existing SID used by this group member,
            and also resets the SSIV value to its starting value. A group
            member MAY re-register prior to the actual exhaustion of the SSIV
            field to avoid dropping data packets due to the exhaustion of
            available SSIV values combined with a particular SID value.</t>

            <t>A group member MUST ignore an SID Download Type KD payload
            present in a GSA-REKEY message, otherwise more than one GM may end
            up using the same SID.</t>
          </section>

          <section title="GCKS Semantics">
            <t>If any KD payload includes keying material that is associated
            with a counter-mode of operation, an SID Download Type KD payload
            containing at least one SID_VALUE attribute MUST be included. The
            GCKS MUST NOT send the SID Download Type KD payload as part of a
            GSA_REKEY message, because distributing the same sender-specific
            policy to more than one group member will reduce the security of
            the group.</t>
          </section>
        </section>
-->
      </section>

      <section anchor="delete" title="Delete Payload">
        <t>There are occasions when the GCKS may want to signal to group
        members to delete policy at the end of a broadcast, if group policy
        has changed, or the GCKS needs to reset the policy and keying material
        for the group due to an emergency. Deletion of keys MAY be
        accomplished by sending an IKEv2 Delete Payload, section 3.11 of <xref
        target="RFC7296"></xref> as part of a registration or rekey Exchange.
        Whenever an SA is to be deleted, the GKCS SHOULD send the Delete
        Payload in both registration and rekey exchanges, because GMs with
        previous group policy may contact the GCKS using either exchange.
        </t>

        <t>The Protocol ID MUST be GIKE_REKEY (&lt;TBA&gt;) for GSA_REKEY pseudo-exchange, 2 for AH or 3
        for ESP. Note that only one protocol id value can be defined in a
        Delete payload. If a TEK and a KEK SA for GSA_REKEY pseudo-exchange must be
        deleted, they must be sent in different Delete payloads. Similarly, if
        a TEK specifying ESP and a TEK specifying AH need to be deleted, they
        must be sent in different Delete payloads.
        </t>

        <t>There may be circumstances where the GCKS may want to reset the
        policy and keying material for the group. The GCKS can signal deletion
        of all policy of a particular TEK by sending a TEK with a SPI value
        equal to zero in the delete payload. In the event that the
        administrator is no longer confident in the integrity of the group
        they may wish to remove all KEK and all the TEKs in the group. This is
        done by having the GCKS send a delete payload with a SPI of zero and a
        Protocol-ID of AH or ESP to delete all TEKs, followed by another
        delete payload with a SPI value of zero and Protocol-ID of KEK SA to
        delete the KEK SA.
        </t>
      </section>

      <section anchor="notify" title="Notify Payload">
        <t>G-IKEv2 uses the same Notify payload as specified in <xref
        target="RFC7296"></xref>, section 3.10.
        </t>

        <t>There are additional Notify Message types introduced by G-IKEv2 to
        communicate error conditions and status (see <xref target="IANA" />).
        <list style="symbols">
          <t>INVALID_GROUP_ID (45) - error type notification that indicates that 
          the group id sent during the registration process is invalid.
          The Protocol ID and SPI Size fields in the Notify payload MUST be zero. 
          There is no data associated with this notification and the content of the 
          Notification Data field MUST be ignored on receipt.
          </t>

          <t>AUTHORIZATION_FAILED (46) - error type notification that is sent in 
          the response to a GSA_AUTH message when authorization failed.
          The Protocol ID and SPI Size fields in the Notify payload MUST be zero.
          There is no data associated with this notification and the content of the 
          Notification Data field MUST be ignored on receipt.
          </t>

          <t>REGISTRATION_FAILED (&lt;TBA&gt;) - error type notification that is sent 
          by the GCKS when the GM registration request cannot be satisfied.
          The Protocol ID and SPI Size fields in the Notify payload MUST be zero.
          There is no data associated with this notification and the content of the 
          Notification Data field MUST be ignored on receipt.
          </t>

          <t>SENDER (16429) - status type notification that is sent in 
          the GSA_AUTH or the GSA_REGISTRATION exchanges to indicate that the GM
          intends to be sender of data traffic. The data includes a count of 
          how many SID values the GM desires. The count MUST be 4 octets long
          and contain the big endian representation of the number of 
          requested SIDs. The Protocol ID and SPI Size fields in the Notify payload MUST be zero.
          </t>

          <t>REKEY_IS_NEEDED (&lt;TBA&gt;) - status type notification that is sent in the 
          GSA_AUTH response message to indicate that the GM must
          perform an immediate rekey of IKE SA to make it secure against
          quantum computers and then start a registration request over.
          The Protocol ID and SPI Size fields in the Notify payload MUST be zero.
          There is no data associated with this notification and the content of the 
          Notification Data field MUST be ignored on receipt.
          </t>
        </list>
        </t>

<!-- YYYY -->
        <section anchor="tunnel" title="USE_TRANSPORT_MODE Notification">
          <t>This specification uses USE_TRANSPORT_MODE notification defined in section 3.10.1 of
          <xref target="RFC7296" /> to specify which mode data security SAs should be created in.
          The GCKS MUST include one USE_TRANSPORT_MODE notification in a message containing the GSA payload 
          for every data security SAs specified in this payload that is to be created in transport mode.
          In other words, there must be as many these notifications included in the message as many SAs are created in transport mode.
          The Protocol ID, SPI Size and SPI fields of the Notify Payload MUST correctly specify each such SA.
          </t>
        </section>
<!-- YYYY -->

      </section>

      <section title="Authentication Payload">
        <t>G-IKEv2 uses the same Authentication payload as specified in <xref
        target="RFC7296"></xref>, section 3.8, to authenticate the rekey message.
        However, if it is used in the GSA_REKEY messages the content of the payload
        is computed differently, as described in <xref target="gsa_rekey_auth" />.
        </t>
      </section> 
    </section>

    <section title="Interaction with other IKEv2 Protocol Extensions" anchor="ike_ext" >
      <t>A number of IKEv2 extensions is defined that can be used to extend
      protocol functionality. G-IKEv2 is compatible with most of them.
      In particular, EAP authentication defined in <xref target="RFC7296" /> can be used 
      to establish registration IKE SA, as well as Secure Password authentication
      (<xref target="RFC6467" />). G-IKEv2 is compatible with and can use IKEv2 Session Resumption
      <xref target="RFC5723"></xref> except that a GM would include the
      initial ticket request in a GSA_AUTH exchange instead of an
      IKE_AUTH exchange. G-IKEv2 is also compatible with Multiple Key Exchanges in IKEv2 
      framework, defined in <xref target="I-D.ietf-ipsecme-ikev2-multiple-ke" />.
      </t>

      <t>Some IKEv2 extensions however require special handling if used in G-IKEv2.
      </t>

      <section title="Mixing Preshared Keys in IKEv2 for Post-quantum Security">
        <t>G-IKEv2 can take advantage of the protection provided by
        Postquantum Preshared Keys (PPK) for IKEv2 <xref
        target="RFC8784"></xref>. However, the use of 
        PPK leaves the initial IKE SA susceptible to quantum
        computer (QC) attacks. For this reason an alternative approach
        for using PPK in IKEv2 defined in <xref target="I-D.smyslov-ipsecme-ikev2-qr-alt" />
        SHOULD be used.
        </t>

        <t>If the alternative approach is not supported by the peers,
        then the GCKS MUST NOT send GSA and KD payloads in the GSA_AUTH response message.
        Instead, the GCKS MUST return a new notification REKEY_IS_NEEDED.
        Upon receiving this notification in the GSA_AUTH response
        the GM MUST perform an IKE SA rekey and then initiate a new GSA_REGISTRATION
        request for the same group. Below are possible scenarios involving using PPK.
        </t>

        <t>The GM starts the IKE_SA_INIT exchange requesting using PPK, and the GCKS responds with agreement to do it, 
        or aborts according to its "mandatory_or_not" flag:</t>

        <figure title="IKE_SA_INIT Exchange requesting using PPK" anchor="ike_sa_init_ppk">
          <preamble></preamble>
          <artwork><![CDATA[
 Initiator (Member)                Responder (GCKS)
--------------------              ------------------
 HDR, SAi1, KEi, Ni, N(USE_PPK)  -->
                              <--  DR, SAr1, KEr, Nr, [CERTREQ],
                                   N(USE_PPK)
          ]]></artwork>
          <postamble></postamble>
        </figure>

        <t>The GM then starts the GSA_AUTH exchange with the PPK_ID; if using PPK is not mandatory for the GM, 
        the NO_PPK_AUTH notification is included in the request:</t>

        <figure title="GSA_AUTH Request using PPK" anchor="gsa_auth_ppk">
          <preamble></preamble>
          <artwork><![CDATA[
 Initiator (Member)                Responder (GCKS)
--------------------              ------------------
 HDR, SK{IDi, AUTH, IDg, 
 N(PPK_IDENTITY), N(NO_PPK_AUTH)}  -->
          ]]></artwork>
          <postamble></postamble>
        </figure>

        <t>If the GCKS has no such PPK and using PPK is not mandatory for it and the NO_PPK_AUTH is included, 
        then the GCKS continues without PPK; in this case no rekey is needed: </t>

        <figure title="GSA_AUTH Response using no PPK" anchor="gsa_auth_response_no_ppk">
          <preamble></preamble>
          <artwork><![CDATA[
 Initiator (Member)              Responder (GCKS)
--------------------            ------------------
                            <--  HDR, SK{IDr, AUTH, GSA, KD}
          ]]></artwork>
          <postamble></postamble>
        </figure>

        <t>If the GCKS has no such PPK and either the NO_PPK_AUTH is missing or using PPK is mandatory for the GCKS, 
        the GCKS aborts the exchange:</t>

        <figure title="GSA_AUTH Error Response" anchor="gsa_auth_response_ppk_error">
          <preamble></preamble>
          <artwork><![CDATA[
 Initiator (Member)                Responder (GCKS)
--------------------              ------------------
                              <--  HDR, SK{N(AUTHENTICATION_FAILED)}
          ]]></artwork>
          <postamble></postamble>
        </figure>

        <t>Assuming the GCKS has the proper PPK it continues with a request to the GM 
        to immediately perform a rekey by sending the REKEY_IS_NEEDED notification:</t>

        <figure title="GSA_AUTH Response using PPK" anchor="gsa_auth_response_ppk">
          <preamble></preamble>
          <artwork><![CDATA[
 Initiator (Member)               Responder (GCKS)
--------------------             ------------------
                             <--  HDR, SK{IDr, AUTH, N(PPK_IDENTITY),
                                  N(REKEY_IS_NEEDED) }
          ]]></artwork>
          <postamble></postamble>
        </figure>

        <t>The GM initiates the CREATE_CHILD_SA exchange to rekey the initial IKE SA and then makes a new
        registration request for the same group over the new IKE SA:</t>

        <figure title="Rekeying IKE SA followed by GSA_REGISTRATION Exchange" anchor="ppk_rekey">
          <preamble></preamble>
          <artwork><![CDATA[
 Initiator (Member)                Responder (GCKS)
--------------------              ------------------
 HDR, SK{SA, Ni, KEi}  -->
                              <--  HDR, SK{SA, Nr, KEr}
 HDR, SK{IDg} --->
                              <--  HDR, SK{GSA, KD}
          ]]></artwork>
          <postamble></postamble>
        </figure>

      </section>
    </section>


    <section title="Security Considerations">
      <section title="GSA Registration and Secure Channel">
        <t>G-IKEv2 registration exchange uses IKEv2 IKE_SA_INIT protocols,
        inheriting all the security considerations documented in <xref
        target="RFC7296"></xref> section 5 Security Considerations, including
        authentication, confidentiality, protection against man-in-the-middle,
        protection against replay/reflection attacks, and denial of service
        protection. The GSA_AUTH and GSA_REGISTRATION exchanges also take
        advantage of those protections. In addition, G-IKEv2 brings in the
        capability to authorize a particular group member regardless of
        whether they have the IKEv2 credentials.</t>
      </section>

      <section title="GSA Maintenance Channel">
        <t>The GSA maintenance channel is cryptographically and integrity
        protected using the cryptographic algorithm and key negotiated in the
        GSA member registration exchanged.</t>

        <section title="Authentication/Authorization">
          <t>Authentication is implicit, the public key of the identity is
          distributed during the registration, and the receiver of the rekey
          message uses that public key and identity to verify the message came
          from the authorized GCKS.</t>
        </section>

        <section title="Confidentiality">
          <t>Confidentiality is provided by distributing a confidentiality key
          as part of the GSA member registration exchange.</t>
        </section>

        <section title="Man-in-the-Middle Attack Protection">
          <t>GSA maintenance channel is integrity protected by using a digital
          signature.</t>
        </section>

        <section title="Replay/Reflection Attack Protection">
          <t>The GSA_REKEY message includes a monotonically increasing
          sequence number to protect against replay and reflection attacks. A
          group member will recognize a replayed message by comparing the
          Message ID number to that of the last received rekey message, any
          rekey message containing a Message ID number less than or equal to
          the last received value MUST be discarded. Implementations should
          keep a record of recently received GSA rekey messages for this
          comparison.</t>
        </section>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="New Registries">
        <t>A new set of registries is created for G-IKEv2 on IKEv2
        parameters page <xref target="IKEV2-IANA" />. The terms
        Reserved, Expert Review and Private Use are to be applied as defined
        in <xref target="RFC8126"></xref>.</t>

        <t>This document creates a new IANA registry "Transform Type &lt;TBA&gt; - Group Key Management Methods". 
        The initial values of the new registry are:
        <figure align="center">
          <artwork align="left"><![CDATA[
Value                       Group Key Management Method
-------------------------------------------------------
Reserved                    0
Wrapped Key Download        1
Unassigned                 2-1023
Private Use             1024-65535
          ]]></artwork>
        </figure>
        Changes and additions to the unassigned range of this registry are by 
        the Expert Review Policy <xref target="RFC8126" />.</t>

<!-- XXXX
        <t>This document creates a new IANA registry "Transform Type &lt;TBA&gt; - Encapsulation Mode". 
        The initial values of the new registry are:
        <figure align="center">
          <artwork align="left"><![CDATA[
Value           Encapsulation Mode
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Reserved        0
Tunnel          1
Transport       2
Unassigned      3-1023
Private Use     1024-65535
          ]]></artwork>
        </figure>
        Changes and additions to the unassigned range of this registry are by 
        the Expert Review Policy <xref target="RFC8126" />.</t> 
-->

        <t>This document creates a new IANA registry "GSA Attributes". The initial values of the new registry are:
          <figure>
          <preamble></preamble>
          <artwork align="left"><![CDATA[
GSA Attributes          Value  Type   Multiple  Used In
---------------------------------------------------------------------
Reserved                0
GSA_KEY_LIFETIME        1      V      N         (GIKE_REKEY, AH, ESP)
GSA_INITIAL_MESSAGE_ID  2      V      N         (GIKE_REKEY)
GSA_NEXT_SPI            3      V      Y         (GIKE_REKEY, AH, ESP)
Unassigned             5-16383
Private Use        16384-32767
          ]]></artwork>
          </figure>
        Changes and additions to the unassigned range of this registry are by 
        the Expert Review Policy <xref target="RFC8126" />.</t>

        <t>This document creates a new IANA registry "GAP Attributes". The initial values of the new registry are:
          <figure>
          <preamble></preamble>
          <artwork align="left"><![CDATA[
GAP Attributes              Value   Type    Multiple
----------------------------------------------------
Reserved                    0
GAP_ATD                     1       B       N
GAP_DTD                     2       B       N
GAP_SID_BITS                3       B       N
Unassigned                 4-16383
Private Use            16384-32767
          ]]></artwork>
          </figure>
        Changes and additions to the unassigned range of this registry are by 
        the Expert Review Policy <xref target="RFC8126" />.</t>

        <t>This document creates a new IANA registry "Group Key Download Attributes". The initial values of the new registry are:
          <figure>
          <preamble></preamble>
          <artwork align="left"><![CDATA[
GKD Attributes      Value   Type    Multiple    Used In
------------------------------------------------------------
Reserved            0
SA_KEY              1       V       Y           (GIKE_REKEY)
                                    N           (AH, ESP)
Unassigned         2-16383
Private Use    16384-32767
          ]]></artwork>
          </figure>
        Changes and additions to the unassigned range of this registry are by 
        the Expert Review Policy <xref target="RFC8126" />.</t>

        <t>This document creates a new IANA registry "Member Key Download Attributes". The initial values of the new registry are:
          <figure>
          <preamble></preamble>
          <artwork align="left"><![CDATA[
MKD Attributes          Value   Type    Multiple
------------------------------------------------
Reserved                0
KEY_WRAP_KEY            1       V       Y
GM_SID                  2       V       Y
AUTH_KEY                3       V       N
Unassigned             4-16383
Private Use        16384-32767
          ]]></artwork>
          </figure>
        Changes and additions to the unassigned range of this registry are by 
        the Expert Review Policy <xref target="RFC8126" />.</t>
      </section>

      <section title="Changes in the Existing IKEv2 Registries">
        <t>This document defines new Exchange Types in the "IKEv2 Exchange Types" registry:
        <figure align="center">
            <artwork align="left"><![CDATA[
Value       Exchange Type
----------------------------
39          GSA_AUTH
40          GSA_REGISTRATION
41          GSA_REKEY
<TBA>       GSA_INBAND_REKEY
            ]]></artwork>
        </figure>
        </t>

        <t>This document defines new Payload Types in the "IKEv2 Payload Types" registry:
        <figure align="center">
            <artwork align="left"><![CDATA[
Value       Next Payload Type               Notation
----------------------------------------------------
50          Group Identification            IDg
51          Group Security Association      GSA
52          Key Download                    KD
            ]]></artwork>
        </figure>
        </t>

        <t>This document defines a new Security Protocol Identifier in the "IKEv2 Security Protocol Identifiers" registry:
        <figure align="center">
            <artwork align="left"><![CDATA[
<TBA>       GIKE_REKEY
            ]]></artwork>
        </figure>
        </t>

        <t>This document defines new Transform Types in the "Transform Type Values" registry
        and changes the "Used In" column for the existing allocations:
        <figure align="center">
          <artwork align="left"><![CDATA[
Type  Description                          Used In
---------------------------------------------------------------------
1     Encryption Algorithm (ENCR)          (IKE, GIKE_REKEY and ESP)
2     Pseudo-random Function (PRF)         (IKE, GIKE_REKEY)
3     Integrity Algorithm (INTEG)          (IKE, GIKE_REKEY, AH, 
                                            optional in ESP)
4     Diffie-Hellman Group (D-H)           (IKE, optional in AH, ESP)
5     Extended Sequence Numbers (ESN)      (AH and ESP)
<TBA> Authentication Method (AUTH)         (GIKE_REKEY)
<TBA> Group Key Management Method (GKM)    (GIKE_REKEY)
]]><!-- XXXX <![CDATA[<TBA> Encapsulation Mode (MODE)             (AH and ESP)
          ]]> --></artwork>
        </figure>
        </t>

        <t>This document defines a new Attribute Type in the "IKEv2 Transform Attribute Types" registry:
        <figure align="center">
          <artwork align="left"><![CDATA[
Value       Attribute Type              Format
----------------------------------------------
<TBA>       Algorithm Identifier        TLV
          ]]></artwork>
        </figure>
        </t>

        <t>This document defines new Notify Message Types in the "Notify Message Types - Status Types" registry:
        <figure align="center">
          <artwork align="left"><![CDATA[
Value       Notify Messages - Status Types
------------------------------------------
16429       SENDER
          ]]></artwork>
        </figure>
        The Notify type with the value 16429 was allocated earlier in the development of G-IKEv2 document
        with the name SENDER_REQUEST_ID. This specification changes its name to SENDER.
        </t>

        <t>This document defines new Notify Message Types in the "Notify Message Types - Error Types" registry:
        <figure align="center">
          <artwork align="left"><![CDATA[
Value       Notify Messages - Error Types
-----------------------------------------
45          INVALID_GROUP_ID
46          AUTHORIZATION_FAILED
<TBA>       REGISTRATION_FAILED
          ]]></artwork>
        </figure>
        </t>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors thank Lakshminath Dondeti and Jing Xiang for first
      exploring the use of IKEv2 for group key management and providing the
      basis behind the protocol. Mike Sullenberger and Amjad Inamdar were
      instrumental in helping resolve many issues in several versions of the
      document.</t>
    </section>

    <section anchor="Contributers" title="Contributors">
      <t>The following individuals made substantial contributions to early
      versions of this memo.</t>

      <t><figure>
          <preamble></preamble>

          <artwork><![CDATA[
   Sheela Rowles
   Cisco Systems
   170 W. Tasman Drive
   San Jose, California  95134-1706
   USA

   Phone: +1-408-527-7677
   Email: sheela@cisco.com
]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[
   Aldous Yeung
   Cisco Systems
   170 W. Tasman Drive
   San Jose, California  95134-1706
   USA

   Phone: +1-408-853-2032
   Email: cyyeung@cisco.com
]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[
   Paulina Tran
   Cisco Systems
   170 W. Tasman Drive
   San Jose, California  95134-1706
   USA

   Phone: +1-408-526-8902
   Email: ptran@cisco.com
]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[
   Yoav Nir
   Dell EMC
   9 Andrei Sakharov St
   Haifa  3190500
   Israel

   Email: ynir.ietf@gmail.com
]]></artwork>
        </figure></t>
    </section>
  </middle>

    <back>
    <references title="Normative References">
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6054.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7296.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4301.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4302.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4303.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7427.xml"?>
    </references>

    <references title="Informative References">
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2409.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2627.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3740.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4046.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3279.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5480.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6407.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3686.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4106.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4309.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4543.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5374.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5723.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6467.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7383.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7634.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8229.xml"?>
      <?rfc include="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8784.xml"?>
      <?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-ipsecme-ikev2-multiple-ke.xml"?>
      <?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.smyslov-ipsecme-ikev2-qr-alt.xml"?>
      <reference anchor="OFT"
                 target="https://pdfs.semanticscholar.org/d24c/7b41f7bcc2b6690e1b4d80eaf8c3e1cc5ee5.pdf">
          <!-- target="http://download.nai.com/products/media/nai/misc/oft052098.ps" -->
        <front>
          <title>Key Establishment in Large Dynamic Groups Using One-Way Function Trees</title>
          <author fullname="" initials="D." surname="McGrew">
            <organization></organization>
          </author>
          <author fullname="" initials="A." surname="Sherman">
            <organization></organization>
          </author>
          <date month="" year="1998" />
        </front>
        <seriesInfo name="Manuscript, "
                    value="submitted to IEEE Transactions on Software Engineering" />
      </reference>
      <reference anchor="NNL" 
                 target="http://www.wisdom.weizmann.ac.il/~naor/PAPERS/2nl.pdf">
          <!-- target="http://www.wisdom.weizmann.ac.il/~naor/" -->
        <front>
          <title>Revocation and Tracing Schemes for Stateless Receivers</title>
          <author fullname="" initials="D." surname="Naor">
            <organization></organization>
          </author>
          <author fullname="" initials="M." surname="Noal">
            <organization></organization>
          </author>
          <author fullname="" initials="J." surname="Lotspiech">
            <organization></organization>
          </author>
          <date month="" year="2001" />
        </front>
        <seriesInfo name="Advances in Cryptology, Crypto '01, "
                    value="Springer-Verlag LNCS 2139, 2001, pp. 41-62" />
      </reference>
      <reference anchor="IKEV2-IANA"
                 target="http://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-parameters-7">
        <front>
          <title>Internet Key Exchange Version 2 (IKEv2) Parameters</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date />
        </front>
      </reference>
    </references>

    <section anchor="lkh_key_management" title="Use of LKH in G-IKEv2">
      <t>Section 5.4 of <xref target="RFC2627"></xref> describes the LKH
      architecture, and how a GCKS uses LKH to exclude group members. This
      section clarifies how the LKH architecture is used with G-IKEv2.</t>

      <section anchor="lkh_notation" title="Notation">
        <t>In this section we will use the notation X{Y} 
        where a key with ID Y is encrypted with the key with ID X.
        The notation 0{Y} means that the default wrap key (SK_w) is used 
        to encrypt key Y, and the notation X{0} means key X is used 
        to encrypt the group SA key. Note, that 0{0} means that
        the group SA key is encrypted with default wrap key.
        </t>

        <t>The content of the KD payload will be shown as a sequence
        of Key Packets. The Group Key Packet substructure will be denoted as SAn(),
        when n is an SPI for the SA, and The Member Key Packet substructure
        will be denoted as GM(). The content of the Key Packets 
        is shown as SA_KEY and KEY_WRAP_KEY attributes with the notation
        described above. Here is the example of KD payload.
        <figure align="center">
          <artwork align="center"><![CDATA[
KD(SA1(X{0}),GM(Y{X},Z{Y},0{Z})
          ]]></artwork>
        </figure>

        For simplicity any other attributes in the KD payload are omitted.
        </t>

        <t>We will also use the notation X-&gt;Y-&gt;Z
        to describe the Key Path, i.e. the relation between the keys.
        In this case the keys had the following relation: Z{Y}, Y{X}.
        </t>
      </section>

      <section title="Group Creation">
        <t>When a GCKS forms a group, it creates a key tree as shown in the
        figure below. The key tree contains logical keys (which are represented as
        the values of their Key IDs in the figure) and a private key shared with only a single GM
        (the GMs are represented as letters followed by the corresponding 
        key ID in parentheses in the figure). The root of the tree contains the
        multicast rekey SA key (which is represented as SAn(0), showing
        that its Key ID is always zero). The figure below assumes that the Key IDs
        are assigned sequentially; this is not a requirement and only used
        for illustrative purposes. The GCKS may create a complete tree as shown, or a partial tree which is
        created on demand as members join the group.
        </t>

        <figure align="center" anchor="initial-tree" title="Initial LKH tree">
          <artwork align="center"><![CDATA[
                          SA1(0)
             +------------------------------+
             1                              2
     +---------------+              +---------------+
     3               4              5               6
 +-------+       +-------+      +--------+      +--------+
A(7)    B(8)    C(9)   D(10)  E(11)    F(12)  G(13)    H(14)
          ]]></artwork>
        </figure>

        <t>When GM A joins the group, the GCKS provides it
        with the keys in the KEY_WRAP_KEY attributes in the KD payload of the GSA_AUTH or
        GSA_REGISTRATION exchange. Given the tree shown in figure above, the
        KD payload will be:

<figure align="center" title="KD Payload for the Group Member A">
  <artwork align="center"><![CDATA[
KD(SA1(1{0}),GM(3{1},7{3},0{7})
  ]]></artwork>
</figure>

        From these attributes the GM A will construct 
        the Key Path 0-&gt;1-&gt;3-&gt;7-&gt;0 and since it
        ends up with SK_w, it will use all the KEY_WRAP_KEY attributes 
        present in the path as its working Key Path: 1-&gt;3-&gt;7.
        </t>

        <t>Similarly, when other GMs will be joining the group they will be provided with the corresponding 
        keys, so after all the GMs will have the following working Key Paths:
        <figure align="center">
          <artwork align="left"><![CDATA[
A: 1->3->7      B: 1->3->8      C: 1->4->9,     D: 1->4->10
E: 2->5->11     F: 2->5->12     G: 2->6->13     H: 2->6->14
          ]]></artwork>
        </figure>
        </t>
      </section>

      <section title="Simple Group SA Rekey">
        <t>If the GCKS performs a simple SA rekey without changing group membership,
        it will only send Group Key Packet in the KD payload with a new
        SA key encrypted with the default KWK.

        <figure align="center" title="KD Payload for the Group Member F">
          <artwork align="center"><![CDATA[
KD(SA2(0{0}))
          ]]></artwork>
        </figure>

        All the GMs will be able to decrypt it and no changes in their working Key Paths will take place.
        </t>
      </section>

      <section title="Group Member Exclusion">
        <t>If the GKCS has reason to believe that a GM should be excluded,
        then it can do so by sending a GSA_REKEY message that includes a set
        of GM_KEY attributes which would allow all GMs except for the excluded one 
        to get a new SA key.
        </t>

        <t>In the example below the GCKS excludes GM F. For this purpose
        it changes the key tree as follows, replacing the key 2 with the key 15 and
        the key 5 with the key 16. It also a new SA key for a new SA3.
        </t>

        <figure align="center" anchor="updated-tree"
                title="LKH tree after F has been excluded">
          <artwork align="center"><![CDATA[
                          SA3(0)
             +------------------------------+
             1                             15
     +---------------+              +---------------+
     3               4             16               6
 +-------+       +-------+      +----           +--------+
A(7)    B(8)    C(9)   D(10)  E(11)    F(12)  G(13)    H(14)
          ]]></artwork>
        </figure>

        <t>Then it sends the following KD payload for the new rekey SA3:

        <figure align="center" title="KD Payload for the Group Member F">
          <artwork align="center"><![CDATA[
KD(SA3(1{0},SA3(15{0})),GM(6{15},16{15},11{16})
          ]]></artwork>
        </figure>

        While processing this KD payload:
        <list style="symbols">
          <t>GMs A, B, C and D will be able to decrypt the SA_KEY attribute 1{0} by using
          the "1" key from their key path. Since no new GM_KEY attributes are in the new 
          Key Path, they won't update their working Key Paths.
          </t>
          <t>GMs G and H will construct new Key Path 15-&gt;0 and will be able to decrypt
          the new GM_KEY 15 using the key 6 from their working Key Paths. So, they will
          update their working Key Paths replacing their beginnings up to the key 6 
          with the new Key Path (thus replacing the key 2 with the key 15).
          </t>
          <t>GM E will construct new Key Path 16-&gt;15-&gt;0 and will be able to decrypt
          the new GM_KEY 16 using the key 11 from its working Key Path. So, it will
          update its working Key Path replacing its beginnings up to the key 11 
          with the new Key Path (thus replacing the key 2 with the key 15 and the key 5 with the key 16).
          </t>
          <t>GM F won't be able to construct any Key Path leading to any key he possesses,
          so it will be unable to decrypt the new SA key for the SA3 and thus it will be excluded
          from the group once the GCKS starts sending TEK keys using SA3.
          </t>
        </list>
        </t>

        <t>Finally, the GMs will have the following working Key Paths:
        <figure align="center">
          <artwork align="left"><![CDATA[
A: 1->3->7      B: 1->3->8      C: 1->4->9,     D: 1->4->10
E: 15->16->11   F: excluded     G: 15->6->13    H: 15->6->14
          ]]></artwork>
        </figure>
        </t>
      </section>
    </section>
  </back>
</rfc>

